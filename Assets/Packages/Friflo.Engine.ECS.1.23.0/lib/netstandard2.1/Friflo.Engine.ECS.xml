<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Friflo.Engine.ECS</name>
    </assembly>
    <members>
        <member name="T:Friflo.Engine.ECS.Archetype">
            <summary>
            An <see cref="T:Friflo.Engine.ECS.Archetype"/> store entities with a specific set of <see cref="T:Friflo.Engine.ECS.IComponent"/> and <see cref="T:Friflo.Engine.ECS.ITag"/> types.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#archetype">Example.</a>
            </summary>
            <remarks>
            E.g. all entities with a <see cref="T:Friflo.Engine.ECS.Position"/> and <see cref="T:Friflo.Engine.ECS.Rotation"/> component are store in the same archetype.<br/>
            In case of removing one of these components or adding a new one from / to an <see cref="T:Friflo.Engine.ECS.Entity"/> the entity is moved to a different archetype.<br/>
            <br/>
            This is the basic pattern for an archetype base ECS. This approach enables efficient entity / component queries.<br/>
            A query result is simply the union of all archetypes having the requested components.<br/>
            <br/>
            Queries can be created via generic <see cref="T:Friflo.Engine.ECS.EntityStoreBase"/>.<c>Query()</c> methods.<br/>
            </remarks>
        </member>
        <member name="P:Friflo.Engine.ECS.Archetype.Count">
            <summary>Number of entities / components stored in the <see cref="T:Friflo.Engine.ECS.Archetype"/></summary>
        </member>
        <member name="P:Friflo.Engine.ECS.Archetype.ComponentCount">
            <summary>Number of <see cref="P:Friflo.Engine.ECS.Archetype.ComponentTypes"/> managed by the archetype.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.Archetype.Capacity">
            <summary>The current capacity reserved to store entity components.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.Archetype.EntityIds">
            <summary>The list of entity ids stored in the archetype.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.Archetype.Store">
            <summary>The <see cref="T:Friflo.Engine.ECS.EntityStore"/> owning the archetype.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.Archetype.ComponentTypes">
            <summary>The <see cref="T:Friflo.Engine.ECS.IComponent"/> types managed by the archetype.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.Archetype.Tags">
            <summary>The <see cref="T:Friflo.Engine.ECS.ITag"/> types managed by the archetype.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.Archetype.Entities">
            <summary>Return all <see cref="T:Friflo.Engine.ECS.Entity"/>'s stored in the <see cref="T:Friflo.Engine.ECS.Archetype"/>.</summary>
            <remarks>Property is mainly used for debugging.<br/>
            For efficient access to entity <see cref="T:Friflo.Engine.ECS.IComponent"/>'s use one of the generic <b><c>EntityStore.Query()</c></b> methods. </remarks>
        </member>
        <member name="F:Friflo.Engine.ECS.Archetype.entityIds">
            Store the entity id for each component.
        </member>
        <member name="F:Friflo.Engine.ECS.Archetype.heapMap">
            <remarks>Lookups on <see cref="F:Friflo.Engine.ECS.Archetype.heapMap"/>[] does not require a range check. See <see cref="M:Friflo.Engine.ECS.EntitySchema.CheckStructIndex(System.Type,System.Int32)"/></remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.Archetype.CreateEntity">
            <summary>
            Create an <see cref="T:Friflo.Engine.ECS.Entity"/> with the <see cref="P:Friflo.Engine.ECS.Archetype.ComponentTypes"/> and <see cref="P:Friflo.Engine.ECS.Archetype.Tags"/> managed by the archetype.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.Archetype.EnsureCapacity(System.Int32)">
            <summary>
            Allocates memory for entity components in the archetype to enable adding entity components without reallocation.
            </summary>
            <returns>The number of entities that can be added without reallocation. </returns>
        </member>
        <member name="M:Friflo.Engine.ECS.Archetype.#ctor(Friflo.Engine.ECS.ArchetypeConfig@)">
            <summary>Create an instance of an <see cref="F:Friflo.Engine.ECS.EntityStoreBase.defaultArchetype"/></summary>
        </member>
        <member name="M:Friflo.Engine.ECS.Archetype.#ctor(Friflo.Engine.ECS.ArchetypeConfig@,Friflo.Engine.ECS.StructHeap[],Friflo.Engine.ECS.Tags@)">
            <summary>
            Note!: Ensure constructor cannot throw exceptions to eliminate <see cref="T:System.TypeInitializationException"/>'s
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.Archetype.CreateWithComponentTypeList(Friflo.Engine.ECS.ArchetypeConfig@,System.Collections.Generic.List{Friflo.Engine.ECS.ComponentType},Friflo.Engine.ECS.Tags@)">
            <remarks>
            Is called by methods using a set of arbitrary struct <see cref="T:Friflo.Engine.ECS.ComponentType"/>'s.<br/>
            Using a <see cref="T:System.Collections.Generic.List`1"/> of types is okay. Method is only called for missing <see cref="T:Friflo.Engine.ECS.Archetype"/>'s
            </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.Archetype.MoveEntityTo(Friflo.Engine.ECS.Archetype,System.Int32,System.Int32,Friflo.Engine.ECS.Archetype)">
            <returns> the component index in the <paramref name="targetArch"/> </returns>
        </member>
        <member name="M:Friflo.Engine.ECS.Archetype.CopyComponents(Friflo.Engine.ECS.Archetype,System.Int32,System.Int32)">
            <remarks>Must be used only on case all <see cref="P:Friflo.Engine.ECS.Archetype.ComponentTypes"/> are <see cref="F:Friflo.Engine.ECS.ComponentType.IsBlittable"/></remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.Archetype.AddEntity(Friflo.Engine.ECS.Archetype,System.Int32)">
            <returns> the component index in <paramref name="arch"/> </returns>
        </member>
        <member name="F:Friflo.Engine.ECS.ArchetypeUtils.MinCapacity">
            <summary> Minimum: 64 see <see cref="F:Friflo.Engine.ECS.ArchetypeUtils.MaxComponentMultiple"/> to support padding for vectorization.</summary>
            <remarks> Could be less than 64 if using <see cref="F:Friflo.Engine.ECS.ComponentType`1.ByteSize"/> for <see cref="F:Friflo.Engine.ECS.StructHeap`1.components"/> </remarks>
        </member>
        <member name="F:Friflo.Engine.ECS.ArchetypeUtils.MaxComponentMultiple">
            <summary> Maximum number of components  </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.ArchetypeKey">
            <remarks>
            As the <see cref="T:Friflo.Engine.ECS.ArchetypeKey"/> requires ~72 bytes it performs much better as a class than a struct
            in a <see cref="T:System.Collections.Generic.HashSet`1"/><br/>
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> requires two copies of an <see cref="T:Friflo.Engine.ECS.ArchetypeKey"/>
            </remarks>
        </member>
        <member name="F:Friflo.Engine.ECS.ArchetypeMemory.capacity">
            <summary> 512, 1024, 2048, 4096, ... </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.ArchetypeMemory.shrinkThreshold">
            <summary>  -1,  512, 1024, 2048, ... </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.ComponentTypes">
            <summary>
            <see cref="T:Friflo.Engine.ECS.ComponentTypes"/> define a set of <see cref="T:Friflo.Engine.ECS.IComponent"/>'s used to list the
            component <see cref="T:System.Type"/>'s of an <see cref="T:Friflo.Engine.ECS.Archetype"/>.
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.ComponentTypes.Count">
            <summary>Return the number of contained <see cref="T:Friflo.Engine.ECS.IComponent"/>'s.</summary>
        </member>
        <member name="M:Friflo.Engine.ECS.ComponentTypes.Has``1">
            <summary>
            Return true if it contains the passed <see cref="T:Friflo.Engine.ECS.IComponent"/> type <typeparamref name="T1"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.ComponentTypes.Has``2">
            <summary>
            Return true if it contains all passed <see cref="T:Friflo.Engine.ECS.IComponent"/> types
            <typeparamref name="T1"/> and <typeparamref name="T2"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.ComponentTypes.Has``3">
            <summary>
            Return true if it contains all passed <see cref="T:Friflo.Engine.ECS.IComponent"/> types
            <typeparamref name="T1"/>, <typeparamref name="T2"/> and <typeparamref name="T3"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.ComponentTypes.HasAll(Friflo.Engine.ECS.ComponentTypes@)">
            <summary>
            Return true if it contains all passed <paramref name="componentTypes"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.ComponentTypes.HasAny(Friflo.Engine.ECS.ComponentTypes@)">
            <summary>
            Return true if it contains any of the passed <paramref name="componentTypes"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.ComponentTypes.Add``1">
            <summary>
            Add the passed <see cref="T:Friflo.Engine.ECS.IComponent"/> type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.ComponentTypes.Add(Friflo.Engine.ECS.ComponentTypes@)">
            <summary>
            Add all passed <paramref name="componentTypes"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.ComponentTypes.Remove``1">
            <summary>
            Add the passed <see cref="T:Friflo.Engine.ECS.IComponent"/> type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.ComponentTypes.Remove(Friflo.Engine.ECS.ComponentTypes@)">
            <summary>
            Remove all passed  <paramref name="componentTypes"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.ComponentTypes.Get``1">
            <summary>
            Create an instance containing the passed <see cref="T:Friflo.Engine.ECS.IComponent"/> type <typeparamref name="T1"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.ComponentTypes.Get``2">
            <summary>
            Create an instance containing the passed <see cref="T:Friflo.Engine.ECS.IComponent"/> types
            <typeparamref name="T1"/> and <typeparamref name="T2"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.ComponentTypes.Get``3">
            <summary>
            Create an instance containing the passed <see cref="T:Friflo.Engine.ECS.IComponent"/> types
            <typeparamref name="T1"/>, <typeparamref name="T2"/> and <typeparamref name="T3"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.ComponentTypes.Get``4">
            <summary>
            Create an instance containing the passed <see cref="T:Friflo.Engine.ECS.IComponent"/> types
            <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/> and <typeparamref name="T4"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.ComponentTypes.Get``5">
            <summary>
            Create an instance containing the passed <see cref="T:Friflo.Engine.ECS.IComponent"/> types <typeparamref name="T1"/>,
            <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>  and <typeparamref name="T4"/>.
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.ComponentTypesEnumerator">
            <summary>
            Return the <see cref="T:Friflo.Engine.ECS.IComponent"/> types of <see cref="T:Friflo.Engine.ECS.ComponentTypes"/>.
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.EntityComponents">
            <summary>
            Return the <see cref="T:Friflo.Engine.ECS.IComponent"/>'s added to an <see cref="T:Friflo.Engine.ECS.Entity"/>.
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.EntityComponents.Count">
            <summary>Return the number of <see cref="T:Friflo.Engine.ECS.IComponent"/>'s of an entity.</summary>
        </member>
        <member name="T:Friflo.Engine.ECS.ComponentEnumerator">
            <summary>
            Enumerate the components of an entity by iterating <see cref="T:Friflo.Engine.ECS.EntityComponents"/>. 
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.EntityComponent">
            <summary>An item in <see cref="T:Friflo.Engine.ECS.EntityComponents"/> containing an entity <see cref="T:Friflo.Engine.ECS.IComponent"/>.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.EntityComponent.Value">
            <summary>
            Property is mainly used to display a component value in the Debugger.<br/>
            It has poor performance as is boxes the returned component. 
            </summary>
            <remarks>
            To access a component use <see cref="M:Friflo.Engine.ECS.Entity.GetComponent``1"/>
            </remarks>
        </member>
        <member name="P:Friflo.Engine.ECS.EntityComponent.Type">
            <summary>Return the <see cref="T:System.Type"/> of an entity component.</summary>
        </member>
        <member name="T:Friflo.Engine.ECS.EntityStoreBase">
            <summary>
            Store the <see cref="T:Friflo.Engine.ECS.IComponent"/>s and <see cref="T:Friflo.Engine.ECS.ITag"/> for the <see cref="T:Friflo.Engine.ECS.Entity"/>'s of an <see cref="T:Friflo.Engine.ECS.EntityStore"/>.  
            </summary>
            <remarks>
            <see cref="T:Friflo.Engine.ECS.EntityStoreBase"/> is separated as a base from <see cref="T:Friflo.Engine.ECS.EntityStore"/> as is can be used for<br/>
            different entity store implementations like the <see cref="T:Friflo.Engine.ECS.RawEntityStore"/>.
            </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStoreBase.GetArchetype(Friflo.Engine.ECS.ComponentTypes@,Friflo.Engine.ECS.Tags@)">
            <summary>
            Return the <see cref="T:Friflo.Engine.ECS.Archetype"/> storing the specified <paramref name="componentTypes"/> and <paramref name="tags"/>.<br/>
            The <see cref="T:Friflo.Engine.ECS.Archetype"/> is created if not already present.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStoreBase.GetArchetype(Friflo.Engine.ECS.Tags@)">
            <summary>
            Return the <see cref="T:Friflo.Engine.ECS.Archetype"/> storing the specified <paramref name="tags"/>.<br/>
            The <see cref="T:Friflo.Engine.ECS.Archetype"/> is created if not already present.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStoreBase.FindArchetype(Friflo.Engine.ECS.ComponentTypes@,Friflo.Engine.ECS.Tags@)">
            <summary>
            Return the <see cref="T:Friflo.Engine.ECS.Archetype"/> storing the specified <paramref name="componentTypes"/> and <paramref name="tags"/>.<br/>
            </summary>
            <returns> null if the <see cref="T:Friflo.Engine.ECS.Archetype"/> is not present. </returns>
        </member>
        <member name="P:Friflo.Engine.ECS.EntityStoreBase.Count">
            <summary>Number of all entities stored in the entity store</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.EntityStoreBase.NodeMaxId">
            <summary> Return the largest entity <see cref="F:Friflo.Engine.ECS.Entity.Id"/> store in the entity store. </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.EntityStoreBase.Systems">
            <summary> Return the <see cref="T:Friflo.Engine.ECS.Systems"/> instance attached to the entity store. </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.EntityStoreBase.JobRunner">
            <summary> Initialize a default <see cref="T:Friflo.Engine.ECS.ParallelJobRunner"/> used for <see cref="T:Friflo.Engine.ECS.QueryJob"/>'s. </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.EntityStoreBase.Archetypes">
            <summary>Array of <see cref="T:Friflo.Engine.ECS.Archetype"/>'s utilized by the entity store</summary>
            <remarks>Each <see cref="T:Friflo.Engine.ECS.Archetype"/> contains all entities of a specific combination of <b>struct</b> components.</remarks>
        </member>
        <member name="P:Friflo.Engine.ECS.EntityStoreBase.ArchetypeCount">
            <summary> Returns the current number of <see cref="P:Friflo.Engine.ECS.EntityStoreBase.Archetypes"/> managed by the entity store. </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.EntityStoreBase.UniqueEntities">
            <summary>Return all <see cref="T:Friflo.Engine.ECS.UniqueEntity"/>'s in the entity store </summary>
        </member>
        <member name="E:Friflo.Engine.ECS.EntityStoreBase.OnTagsChanged">
            <summary>Add / remove an event handler for <see cref="T:Friflo.Engine.ECS.TagsChanged"/> events triggered by:<br/>
            <see cref="M:Friflo.Engine.ECS.Entity.AddTag``1"/> <br/> <see cref="M:Friflo.Engine.ECS.Entity.AddTags(Friflo.Engine.ECS.Tags@)"/> <br/> <see cref="M:Friflo.Engine.ECS.Entity.RemoveTag``1"/> <br/> <see cref="M:Friflo.Engine.ECS.Entity.RemoveTags(Friflo.Engine.ECS.Tags@)"/>.</summary>
        </member>
        <member name="E:Friflo.Engine.ECS.EntityStoreBase.OnComponentAdded">
            <summary>Add / remove an event handler for <see cref="T:Friflo.Engine.ECS.ComponentChanged"/> events triggered by: <br/>
            <see cref="M:Friflo.Engine.ECS.Entity.AddComponent``1"/>.</summary>
        </member>
        <member name="E:Friflo.Engine.ECS.EntityStoreBase.OnComponentRemoved">
            <summary>Add / remove an event handler for <see cref="T:Friflo.Engine.ECS.ComponentChanged"/> events triggered by: <br/>
            <see cref="M:Friflo.Engine.ECS.Entity.RemoveComponent``1"/>.</summary>
        </member>
        <member name="F:Friflo.Engine.ECS.EntityStoreBase.defaultArchetype">
            <summary>The default <see cref="T:Friflo.Engine.ECS.Archetype"/> has no <see cref="P:Friflo.Engine.ECS.Archetype.ComponentTypes"/> and <see cref="P:Friflo.Engine.ECS.Archetype.Tags"/>.<br/>
            Its <see cref="T:Friflo.Engine.ECS.Archetype"/>.<see cref="F:Friflo.Engine.ECS.Archetype.archIndex"/> is always 0 (<see cref="F:Friflo.Engine.ECS.EntityStoreBase.Static.DefaultArchIndex"/>).</summary>
        </member>
        <member name="T:Friflo.Engine.ECS.EntityStoreBase.InternBase">
            <summary>Contains state of <see cref="T:Friflo.Engine.ECS.EntityStoreBase"/> not relevant for application development.</summary>
            <remarks>Declaring internal state fields in this struct remove noise in debugger.</remarks>
        </member>
        <member name="F:Friflo.Engine.ECS.EntityStoreBase.InternBase.uniqueEntityQuery">
             reused query for <see cref="M:Friflo.Engine.ECS.EntityStoreBase.GetUniqueEntity(System.String)"/>
        </member>
        <member name="F:Friflo.Engine.ECS.EntityStoreBase.Static.DefaultHeapMap">
            <summary>All items in the <see cref="F:Friflo.Engine.ECS.EntityStoreBase.Static.DefaultHeapMap"/> are always null</summary>
        </member>
        <member name="F:Friflo.Engine.ECS.EntityStoreBase.Static.DefaultArchIndex">
            <summary>The index of the <see cref="F:Friflo.Engine.ECS.EntityStoreBase.defaultArchetype"/> - index is always 0</summary>
        </member>
        <member name="F:Friflo.Engine.ECS.EntityStoreBase.Static.MinNodeId">
            <summary>to avoid accidental entity access by id using (default value) 0 </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.EntityStoreBase.Static.NoParentId">
            <summary>
            An <see cref="T:Friflo.Engine.ECS.EntityNode"/> with <see cref="F:Friflo.Engine.ECS.EntityNode.parentId"/> == <see cref="F:Friflo.Engine.ECS.EntityStoreBase.Static.NoParentId"/>
            is declared as <see cref="F:Friflo.Engine.ECS.TreeMembership.floating"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStoreBase.Batch(System.Boolean)">
            <summary>
            Returns a <see cref="T:Friflo.Engine.ECS.CreateEntityBatch"/> used to create entities with components and tags added to the batch.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#batch---create-entity">Example.</a>
            </summary>
            <remarks>
            The returned batch creates an entity with previously added components and tags when calling
            <see cref="M:Friflo.Engine.ECS.CreateEntityBatch.CreateEntity"/>.<br/>
            <br/>
            If <paramref name="autoReturn"/> == true the batch is returned to the EntityStore when
            calling <see cref="M:Friflo.Engine.ECS.CreateEntityBatch.CreateEntity"/>.<br/>
            Subsequent use of the batch throws <see cref="T:Friflo.Engine.ECS.BatchAlreadyReturnedException"/>.<br/>
            <br/>
            If <paramref name="autoReturn"/> == false <see cref="M:Friflo.Engine.ECS.CreateEntityBatch.CreateEntity"/> can be called
            multiple times to create multiple entities.<br/>
            The caller should call <see cref="M:Friflo.Engine.ECS.CreateEntityBatch.Return"/> after usage to prevent unnecessary memory allocations.<br/>
            <br/>
            When calling <see cref="M:Friflo.Engine.ECS.CreateEntityBatch.CreateEntity"/> or <see cref="M:Friflo.Engine.ECS.CreateEntityBatch.Return"/>
            the batch executes without memory allocations.
            </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStoreBase.GetUniqueEntity(System.String)">
            <summary>
            Return the entity with a <see cref="T:Friflo.Engine.ECS.UniqueEntity"/> component and its <see cref="F:Friflo.Engine.ECS.UniqueEntity.uid"/> == <paramref name="uid"/>.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#unique-entity">Example.</a>
            </summary>
            <exception cref="T:System.InvalidOperationException">
            In case none or more than one <see cref="T:Friflo.Engine.ECS.UniqueEntity"/> with the given <paramref name="uid"/> found.
            </exception>
            <remarks>
            To Get all <see cref="T:Friflo.Engine.ECS.UniqueEntity"/>'s of the store use <see cref="P:Friflo.Engine.ECS.EntityStoreBase.UniqueEntities"/>.
            </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStoreBase.Query">
            <summary>
            Create a reusable <see cref="T:Friflo.Engine.ECS.ArchetypeQuery"/> for the entity store.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#query-entities">Example.</a>
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStoreBase.Query``1(Friflo.Engine.ECS.Signature{``0}@)">
            <summary>
            Create a reusable <see cref="T:Friflo.Engine.ECS.ArchetypeQuery"/> for given component <paramref name="signature"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStoreBase.Query``1">
            <summary>
            Create a reusable <see cref="T:Friflo.Engine.ECS.ArchetypeQuery"/> for the given component type.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#query-entities">Example.</a>
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStoreBase.Query``2(Friflo.Engine.ECS.Signature{``0,``1}@)">
            <summary>
            Create a reusable <see cref="T:Friflo.Engine.ECS.ArchetypeQuery"/> for given component <paramref name="signature"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStoreBase.Query``2">
            <summary>
            Create a reusable <see cref="T:Friflo.Engine.ECS.ArchetypeQuery"/> for the given component types.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#query-entities">Example.</a>
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStoreBase.Query``3(Friflo.Engine.ECS.Signature{``0,``1,``2}@)">
            <summary>
            Create a reusable <see cref="T:Friflo.Engine.ECS.ArchetypeQuery"/> for given component <paramref name="signature"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStoreBase.Query``3">
            <summary>
            Create a reusable <see cref="T:Friflo.Engine.ECS.ArchetypeQuery"/> for the given component types.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#query-entities">Example.</a>
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStoreBase.Query``4(Friflo.Engine.ECS.Signature{``0,``1,``2,``3}@)">
            <summary>
            Create a reusable <see cref="T:Friflo.Engine.ECS.ArchetypeQuery"/> for given component <paramref name="signature"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStoreBase.Query``4">
            <summary>
            Create a reusable <see cref="T:Friflo.Engine.ECS.ArchetypeQuery"/> for the given component types.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#query-entities">Example.</a>
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStoreBase.Query``5(Friflo.Engine.ECS.Signature{``0,``1,``2,``3,``4}@)">
            <summary>
            Create a reusable <see cref="T:Friflo.Engine.ECS.ArchetypeQuery"/> for given component <paramref name="signature"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStoreBase.Query``5">
            <summary>
            Create a reusable <see cref="T:Friflo.Engine.ECS.ArchetypeQuery"/> for the given component types.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#query-entities">Example.</a>
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.Signature">
            <summary>
            A <see cref="T:Friflo.Engine.ECS.Signature"/> specify the <see cref="T:Friflo.Engine.ECS.IComponent"/> types used to query entity components<br/>
            using the <see cref="T:Friflo.Engine.ECS.EntityStore"/>.Query(<see cref="T:Friflo.Engine.ECS.Signature"/>) methods.
            </summary>
            <remarks>
            In contrast to <see cref="T:Friflo.Engine.ECS.ComponentTypes"/> the order of <see cref="T:Friflo.Engine.ECS.IComponent"/>'s stored in a signature is
            relevant for queries.<br/>
            The maximum number of <see cref="T:Friflo.Engine.ECS.IComponent"/>'s stored in a signature is currently 5.<br/>
            </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.Signature.Get``1">
            <summary>
            Returns a query <see cref="T:Friflo.Engine.ECS.Signature`1"/> containing the specified component type.<br/>
            </summary>
            <remarks>
            It can be used to query entities with the specified component type with <see cref="T:Friflo.Engine.ECS.EntityStore"/>.Query() methods.
            </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.Signature.Get``2">
            <summary>
            Returns a query <see cref="T:Friflo.Engine.ECS.Signature`2"/> containing the specified component types.<br/>
            </summary>
            <remarks>
            It can be used to query entities with the specified component types with <see cref="T:Friflo.Engine.ECS.EntityStore"/>.Query() methods.
            </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.Signature.Get``3">
            <summary>
            Returns a query <see cref="T:Friflo.Engine.ECS.Signature`3"/> containing the specified component types.<br/>
            </summary>
            <remarks>
            It can be used to query entities with the specified component types with <see cref="T:Friflo.Engine.ECS.EntityStore"/>.Query() methods.
            </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.Signature.Get``4">
            <summary>
            Returns a query <see cref="T:Friflo.Engine.ECS.Signature`4"/> containing the specified component types.<br/>
            </summary>
            <remarks>
            It can be used to query entities with the specified component types with <see cref="T:Friflo.Engine.ECS.EntityStore"/>.Query() methods.
            </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.Signature.Get``5">
            <summary>
            Returns a query <see cref="T:Friflo.Engine.ECS.Signature`5"/> containing the specified component types.<br/>
            </summary>
            <remarks>
            It can be used to query entities with the specified component types with <see cref="T:Friflo.Engine.ECS.EntityStore"/>.Query() methods.
            </remarks>
        </member>
        <member name="T:Friflo.Engine.ECS.SignatureIndexes">
            <summary>
            Note: The order of struct type indices matters.<br/>
            The struct is used when dealing with generic types like: T1, T2, T3, ...   
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.StructChunk`1">
            <remarks>
            <b>Note!</b> Must not contain any other field. Reasons:<br/>
            - to save memory as many <see cref="T:Friflo.Engine.ECS.StructChunk`1"/>'s are stored within a StructHeap{T}.chunks<br/>
            - to enable maximum efficiency when GC iterate StructHeap{T}.chunks" for collection.
            </remarks>
        </member>
        <member name="T:Friflo.Engine.ECS.StructHeap">
            <remarks>
            <b>Note:</b> Should not contain any other fields. Reasons:<br/>
            - to enable maximum efficiency when GC iterate <see cref="F:Friflo.Engine.ECS.Archetype.structHeaps"/> <see cref="F:Friflo.Engine.ECS.Archetype.heapMap"/>
              for collection.
            </remarks>
        </member>
        <member name="T:Friflo.Engine.ECS.StructHeap`1">
            <remarks>
            <b>Note:</b> Should not contain any other fields. Reasons:<br/>
            - to enable maximum efficiency when GC iterate <see cref="F:Friflo.Engine.ECS.Archetype.structHeaps"/> <see cref="F:Friflo.Engine.ECS.Archetype.heapMap"/>
              for collection.
            </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.StructHeap`1.CopyComponent(System.Int32,System.Int32)">
            <remarks>
            Copying a component using an assignment can only be done for <see cref="F:Friflo.Engine.ECS.ComponentType.IsBlittable"/>
            <see cref="T:Friflo.Engine.ECS.ComponentType"/>'s.<br/>
            If not <see cref="F:Friflo.Engine.ECS.ComponentType.IsBlittable"/> serialization must be used.
            </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.StructHeap`1.GetComponentStashDebug">
            <summary>
            Method only available for debugging. Reasons:<br/>
            - it boxes struct values to return them as objects<br/>
            - it allows only reading struct values
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.StructHeap`1.GetComponentDebug(System.Int32)">
            <summary>
            Method only available for debugging. Reasons:<br/>
            - it boxes struct values to return them as objects<br/>
            - it allows only reading struct values
            </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.StructInfo.ChunkSize">
            <summary> Is a multiple of 64. See <see cref="F:Friflo.Engine.ECS.ComponentType`1.PadCount512"/> </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.Tags">
            <summary>
            <see cref="T:Friflo.Engine.ECS.Tags"/> define a set of <see cref="T:Friflo.Engine.ECS.ITag"/>'s used to query entities in an <see cref="T:Friflo.Engine.ECS.EntityStoreBase"/>.
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.Tags.Count">
            <summary>Return the number of contained <see cref="T:Friflo.Engine.ECS.ITag"/>'s.</summary>
        </member>
        <member name="M:Friflo.Engine.ECS.Tags.Has``1">
            <summary>
            Return true if it contain the passed tag <see cref="T:Friflo.Engine.ECS.IComponent"/> type <typeparamref name="T1"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.Tags.Has``2">
            <summary>
            Return true if it contains all passed <see cref="T:Friflo.Engine.ECS.IComponent"/> types
            <typeparamref name="T1"/> and <typeparamref name="T2"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.Tags.Has``3">
            <summary>
            Return true if it contains all passed <see cref="T:Friflo.Engine.ECS.IComponent"/> types
            <typeparamref name="T1"/>, <typeparamref name="T2"/> and <typeparamref name="T3"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.Tags.HasAll(Friflo.Engine.ECS.Tags@)">
            <summary>
            Return true if it contains all passed <paramref name="tags"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.Tags.HasAny(Friflo.Engine.ECS.Tags@)">
            <summary>
            Return true if it contains any of the passed <paramref name="tags"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.Tags.Add``1">
            <summary> Add the passed <see cref="T:Friflo.Engine.ECS.ITag"/> type <typeparamref name="T"/>.</summary>
        </member>
        <member name="M:Friflo.Engine.ECS.Tags.Add(Friflo.Engine.ECS.Tags@)">
            <summary> Add the passed <paramref name="tags"/>.</summary>
        </member>
        <member name="M:Friflo.Engine.ECS.Tags.Remove``1">
            <summary> Removes the passed <see cref="T:Friflo.Engine.ECS.ITag"/> type <typeparamref name="T"/>.</summary>
        </member>
        <member name="M:Friflo.Engine.ECS.Tags.Remove(Friflo.Engine.ECS.Tags@)">
            <summary> Removes the passed <paramref name="tags"/>.</summary>
        </member>
        <member name="M:Friflo.Engine.ECS.Tags.Get``1">
            <summary>
            Create an instance containing the given <see cref="T:Friflo.Engine.ECS.ITag"/> type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.Tags.Get``2">
            <summary>
            Create an instance containing the given <see cref="T:Friflo.Engine.ECS.ITag"/> types
            <typeparamref name="T1"/> and <typeparamref name="T2"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.Tags.Get``3">
            <summary>
            Create an instance containing the given <see cref="T:Friflo.Engine.ECS.ITag"/> types
            <typeparamref name="T1"/>, <typeparamref name="T2"/> and <typeparamref name="T3"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.Tags.Get``4">
            <summary>
            Create an instance containing the given <see cref="T:Friflo.Engine.ECS.ITag"/> types
            <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/> and <typeparamref name="T4"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.Tags.Get``5">
            <summary>
            Create an instance containing the given <see cref="T:Friflo.Engine.ECS.ITag"/> types
            <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/> and
            <typeparamref name="T5"/>.
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.TagsEnumerator">
            <summary>
            Used to enumerate the <see cref="T:Friflo.Engine.ECS.ITag"/>'s stored in <see cref="T:Friflo.Engine.ECS.Tags"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.AssemblyLoader.LoadAssembly(System.Reflection.AssemblyName)">
            <summary>
            <see cref="M:System.Reflection.Assembly.Load(System.String)"/> fails for assemblies loaded when debugging. These are:
            <code>
                System.Security.Permissions
                System.Threading.AccessControl
                System.CodeDom
                Microsoft.Win32.SystemEvents
                System.Configuration.ConfigurationManager
                System.Diagnostics.PerformanceCounter
                System.Diagnostics.EventLog
                System.IO.Ports
                System.Windows.Extensions
            </code>
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.TagNameAttribute">
            <summary>
            Assign a custom tag name used for JSON serialization for annotated <b>struct</b>s implementing <see cref="T:Friflo.Engine.ECS.ITag"/>.
            </summary>
            <remarks>
            This enables changing a struct name in code without changing the JSON serialization format.
            </remarks> 
        </member>
        <member name="T:Friflo.Engine.ECS.ComponentKeyAttribute">
            <summary>
            Assign a custom key used for JSON serialization for annotated <see cref="T:Friflo.Engine.ECS.IComponent"/> and <see cref="T:Friflo.Engine.ECS.Script"/> types.<br/>
            </summary>
            <remarks>
            The attribute is used for:
            - annotated structs implementing <see cref="T:Friflo.Engine.ECS.IComponent"/>.<br/>
            - annotated classes extending <see cref="T:Friflo.Engine.ECS.Script"/>.<br/>
            <br/>
            This enables changing a struct / class name in code without changing the JSON serialization format.  
            </remarks>
        </member>
        <member name="T:Friflo.Engine.ECS.EntitySchema">
            <summary>
            Provide type information about all <see cref="T:Friflo.Engine.ECS.ITag"/>, <see cref="T:Friflo.Engine.ECS.IComponent"/> and <see cref="T:Friflo.Engine.ECS.Script"/> types
            available in the application.
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.EntitySchema.EngineDependants">
            <summary> List of <see cref="T:System.Reflection.Assembly"/>'s referencing the <b>Fliox.Engine</b> assembly as dependency. </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.EntitySchema.Components">
            <summary> Return all <b>component</b> types - structs implementing <see cref="T:Friflo.Engine.ECS.IComponent"/>. </summary>
            <remarks>
            <see cref="F:Friflo.Engine.ECS.ComponentType.StructIndex"/> is equal to the array index<br/>
            <see cref="P:Friflo.Engine.ECS.EntitySchema.Components"/>[0] is always null
            </remarks>
        </member>
        <member name="P:Friflo.Engine.ECS.EntitySchema.Scripts">
            <summary> Return all <see cref="T:Friflo.Engine.ECS.Script"/> types - classes extending <see cref="T:Friflo.Engine.ECS.Script"/></summary>
            <remarks>
            <see cref="F:Friflo.Engine.ECS.ScriptType.ScriptIndex"/> is equal to the array index<br/>
            <see cref="P:Friflo.Engine.ECS.EntitySchema.Scripts"/>[0] is always null
            </remarks>
        </member>
        <member name="P:Friflo.Engine.ECS.EntitySchema.Tags">
            <summary> Return all <b>Tag</b> types - structs implementing <see cref="T:Friflo.Engine.ECS.ITag"/>. </summary>
            <remarks>
            <see cref="F:Friflo.Engine.ECS.TagType.TagIndex"/> is equal to the array index<br/>
            <see cref="P:Friflo.Engine.ECS.EntitySchema.Tags"/>[0] is always null
            </remarks>
        </member>
        <member name="P:Friflo.Engine.ECS.EntitySchema.SchemaTypeByKey">
            <summary> A map to lookup <see cref="T:Friflo.Engine.ECS.ComponentType"/>'s and <see cref="T:Friflo.Engine.ECS.ScriptType"/>'s by <see cref="F:Friflo.Engine.ECS.SchemaType.ComponentKey"/>. </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.EntitySchema.ScriptTypeByType">
            <summary> A map to lookup <see cref="T:Friflo.Engine.ECS.ScriptType"/>'s by <see cref="T:System.Type"/>. </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.EntitySchema.ComponentTypeByType">
            <summary> A map to lookup <see cref="T:Friflo.Engine.ECS.ComponentType"/>'s by <see cref="T:System.Type"/>. </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.EntitySchema.TagTypeByName">
            <summary> A map to lookup <see cref="T:Friflo.Engine.ECS.TagType"/>'s by <see cref="F:Friflo.Engine.ECS.TagType.TagName"/>. </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.EntitySchema.TagTypeByType">
            <summary> A map to lookup <see cref="T:Friflo.Engine.ECS.TagType"/>'s by <see cref="T:System.Type"/>. </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntitySchema.GetComponentType``1">
            <summary>
            Return the <see cref="T:Friflo.Engine.ECS.ComponentType"/> of a struct implementing <see cref="T:Friflo.Engine.ECS.IComponent"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntitySchema.GetScriptType``1">
            <summary>
            Return the <see cref="T:Friflo.Engine.ECS.ScriptType"/> of a class extending <see cref="T:Friflo.Engine.ECS.Script"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntitySchema.GetTagType``1">
            <summary>
            Return the <see cref="T:Friflo.Engine.ECS.TagType"/> of a struct implementing <see cref="T:Friflo.Engine.ECS.ITag"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntitySchema.CheckStructIndex(System.Type,System.Int32)">
            <remarks>
            Ensures <see cref="F:Friflo.Engine.ECS.StructHeap.structIndex"/> and <see cref="F:Friflo.Engine.ECS.StructHeap`1.StructIndex"/> is less than <see cref="F:Friflo.Engine.ECS.EntitySchema.maxStructIndex"/><br/>
            to make range check redundant when accessing <see cref="F:Friflo.Engine.ECS.Archetype.heapMap"/>[] using an index.
            </remarks>
        </member>
        <member name="T:Friflo.Engine.ECS.SchemaType">
            <summary>
            Provide meta data for <see cref="T:Friflo.Engine.ECS.Script"/> classes and <see cref="T:Friflo.Engine.ECS.IComponent"/> / <see cref="T:Friflo.Engine.ECS.ITag"/> structs. 
            </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.SchemaType.ComponentKey">
            <summary>
            If <see cref="F:Friflo.Engine.ECS.SchemaType.Kind"/> is a <see cref="F:Friflo.Engine.ECS.SchemaTypeKind.Component"/> or a <see cref="T:Friflo.Engine.ECS.Script"/>
            the key assigned with <see cref="T:Friflo.Engine.ECS.ComponentKeyAttribute"/>.
            </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.SchemaType.Kind">
            <summary>Returns the <see cref="T:Friflo.Engine.ECS.SchemaTypeKind"/> of the type.</summary>
            <returns>
            <see cref="T:Friflo.Engine.ECS.Script"/> if the type is a <see cref="T:Friflo.Engine.ECS.Script"/><br/>
            <see cref="F:Friflo.Engine.ECS.SchemaTypeKind.Component"/> if the type is a <see cref="T:Friflo.Engine.ECS.IComponent"/><br/>
            <see cref="F:Friflo.Engine.ECS.SchemaTypeKind.Tag"/> if the type is an <see cref="T:Friflo.Engine.ECS.ITag"/><br/>
            </returns>
        </member>
        <member name="F:Friflo.Engine.ECS.SchemaType.Type">
            <summary>
            If <see cref="F:Friflo.Engine.ECS.SchemaType.Kind"/> == <see cref="F:Friflo.Engine.ECS.SchemaTypeKind.Tag"/> the type of a <b>tag</b> struct implementing <see cref="T:Friflo.Engine.ECS.ITag"/>.<br/>
            If <see cref="F:Friflo.Engine.ECS.SchemaType.Kind"/> == <see cref="F:Friflo.Engine.ECS.SchemaTypeKind.Component"/> the type of a <b>component</b> struct implementing <see cref="T:Friflo.Engine.ECS.IComponent"/>.<br/>
            If <see cref="F:Friflo.Engine.ECS.SchemaType.Kind"/> == <see cref="T:Friflo.Engine.ECS.Script"/> the type of a <b>script</b> class extending <see cref="T:Friflo.Engine.ECS.Script"/>.<br/>
            </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.SchemaType.Name">
            <summary>Returns the <see cref="T:System.Type"/> name of the struct / class. </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.ComponentType">
            <summary>
            Provide meta data for an <see cref="T:Friflo.Engine.ECS.IComponent"/> struct.
            </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.ComponentType.StructIndex">
            <summary> The index in <see cref="T:Friflo.Engine.ECS.EntitySchema"/>.<see cref="P:Friflo.Engine.ECS.EntitySchema.Components"/>. </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.ComponentType.IsBlittable">
            <summary> Return true if <see cref="T:Friflo.Engine.ECS.IComponent"/>'s of this type can be copied. </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.ComponentType.StructSize">
            <summary> The size in bytes of the <see cref="T:Friflo.Engine.ECS.IComponent"/> struct. </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.ComponentType`1.PadCount512">
            <summary>
            The returned padding enables using Vector128, Vector256 and Vector512 (512 bits = 64 bytes) operations <br/>
            on <see cref="T:Friflo.Engine.ECS.StructHeap`1"/>.<see cref="F:Friflo.Engine.ECS.StructHeap`1.components"/>
            without the need of an additional for loop to process the elements at the end of a <see cref="T:System.Span`1"/>.
            </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.ComponentType`1.PadCount256">
            <summary> 256 bits = 32 bytes </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.ComponentType`1.PadCount128">
            <summary> 128 bits = 16 bytes </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.ComponentType`1.ComponentMultiple">
            <summary>
            Return the number of components in a <see cref="T:Friflo.Engine.ECS.Chunk`1"/> as a multiple of 64 bytes.
            </summary>
            <remarks>
            This enables providing <see cref="T:Friflo.Engine.ECS.Chunk`1"/> components as <see cref="T:System.Span`1"/> of Vector128, Vector256 and Vector512
            of https://learn.microsoft.com/en-us/dotnet/api/system.runtime.intrinsics.<br/>
            See: <see cref="M:Friflo.Engine.ECS.Chunk`1.AsSpan128``1"/>, <see cref="M:Friflo.Engine.ECS.Chunk`1.AsSpan256``1"/> and <see cref="M:Friflo.Engine.ECS.Chunk`1.AsSpan512``1"/>.<br/>
            <br/>
            It also enables to apply vectorization without a remainder loop.<br/>
            </remarks>
        </member>
        <member name="T:Friflo.Engine.ECS.ScriptType">
            <summary>
            Provide meta data for a <see cref="T:Friflo.Engine.ECS.Script"/> class. 
            </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.ScriptType.ScriptIndex">
            <summary> Ihe index in <see cref="T:Friflo.Engine.ECS.EntitySchema"/>.<see cref="P:Friflo.Engine.ECS.EntitySchema.Scripts"/>. </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.ScriptType.IsBlittable">
            <summary> Return true if <see cref="T:Friflo.Engine.ECS.Script"/>'s of this type can be copied. </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.TagType">
            <summary>
            Provide meta data for an <see cref="T:Friflo.Engine.ECS.ITag"/> struct.
            </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.TagType.TagName">
            <summary> The key name of an <see cref="T:Friflo.Engine.ECS.ITag"/> used for JSON serialization. </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.TagType.TagIndex">
            <summary> The index in <see cref="T:Friflo.Engine.ECS.EntitySchema"/>.<see cref="P:Friflo.Engine.ECS.EntitySchema.Tags"/>. </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.SchemaUtils.CreateScriptType``1(Friflo.Json.Fliox.Mapper.TypeStore,System.Int32)">
            <remarks>
            <see cref="F:Friflo.Engine.ECS.ScriptType`1.Index"/> must be assigned here.<br/>
            Unity initializes static fields of generic types already when creating a instance of that type.
            </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.SchemaUtils.CreateTagType``1(System.Int32)">
            <remarks>
            <see cref="F:Friflo.Engine.ECS.TagType`1.TagIndex"/> must be assigned here.<br/>
            Unity initializes static fields of generic types already when creating a instance of that type.  
            </remarks>
        </member>
        <member name="T:Friflo.Engine.ECS.StoreDispatcher">
            <summary>
            Contains methods to dispatch execution of <see cref="T:System.Action"/>'s or <see cref="T:System.Func`1"/>'s to the main thread.
            </summary>
            <remarks>
            These methods are required to access an <see cref="T:Friflo.Engine.ECS.EntityStore"/> as instances of this class are not thread safe. 
            Note: This file may be moved to project: <see cref="N:Friflo.Engine.ECS"/>
            Method mapping for various UI application libraries.
            <list type="bullet">
              <item> <b>AvaloniaUI</b> - methods map to <c>Avalonia.Threading.Dispatcher.UIThread</c> methods. <br/> </item>
              <item> <b>MAUI</b> - methods map to <c>Microsoft.Maui.ApplicationModel.MainThread</c> methods. <br/> </item>
              <item> <b>WinForms</b> - methods map to <c>System.Windows.Threading.Dispatcher</c> methods. <br/> </item>
            </list>
            </remarks>
        </member>
        <member name="T:Friflo.Engine.ECS.BatchAlreadyReturnedException">
            <summary>
            Is thrown if using a batch returned by <see cref="M:Friflo.Engine.ECS.EntityStoreBase.Batch(System.Boolean)"/> with autoReturn: true<br/>
            after calling <see cref="M:Friflo.Engine.ECS.CreateEntityBatch.CreateEntity"/>.
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.CreateEntityBatch">
            <summary>
            A create batch is used to optimize entity creation.<br/>
            Components and tags are buffered before creating an entity with <see cref="M:Friflo.Engine.ECS.CreateEntityBatch.CreateEntity"/>.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#batch---create-entity">Example.</a>
            </summary>
            <remarks>
            Multiple entities can be created using the same batch.<br/>
            <br/>
            Creating an entity via a batch stores the entity directly in the target <see cref="T:Friflo.Engine.ECS.Archetype"/><br/>
            This prevents any structural changes caused when creating an entity in steps using<br/>  
            <see cref="M:Friflo.Engine.ECS.EntityStore.CreateEntity"/> an subsequent calls to <see cref="M:Friflo.Engine.ECS.Entity.AddComponent``1"/>
            and <see cref="M:Friflo.Engine.ECS.Entity.AddTag``1"/>.
            </remarks>
        </member>
        <member name="P:Friflo.Engine.ECS.CreateEntityBatch.ComponentCount">
            <summary> Return the of components added to the batch.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.CreateEntityBatch.TagCount">
            <summary> Return the of tags added to the batch.</summary>
        </member>
        <member name="M:Friflo.Engine.ECS.CreateEntityBatch.#ctor(Friflo.Engine.ECS.EntityStoreBase)">
            <summary>
            Creates a batch used to create entities with components and tags added to the batch.<br/>
            The created batch instance can be cached.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.CreateEntityBatch.Clear">
            <summary> Clear all components and tags previously added to the batch. </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.CreateEntityBatch.CreateEntity">
            <summary>
            Creates an entity with the components and tags previously added.<br/>
            Added batch components and tags are not cleared.
            </summary>
            <remarks>
            Subsequent use of a batch returned by <c>Batch(autoReturn: true)</c> throws <see cref="T:Friflo.Engine.ECS.BatchAlreadyReturnedException"/>.
            </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.CreateEntityBatch.Return">
            <summary>
            Return the batch instance to its <see cref="T:Friflo.Engine.ECS.EntityStore"/> to prevent memory allocations for future
            <see cref="M:Friflo.Engine.ECS.EntityStoreBase.Batch(System.Boolean)"/> calls.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.CreateEntityBatch.Add``1(``0@)">
            <summary>
            Add the given <paramref name="component"/> that will be added to the entity when calling <see cref="M:Friflo.Engine.ECS.CreateEntityBatch.CreateEntity"/>. 
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.CreateEntityBatch.Add``1">
            <summary>
            Add a component that will be added to the entity when calling <see cref="M:Friflo.Engine.ECS.CreateEntityBatch.CreateEntity"/>. 
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.CreateEntityBatch.Get``1">
            <summary>
            Get a component by reference previously added to the batch.<br/>
            This enables creation of multiple entities using the same batch. 
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.CreateEntityBatch.AddTag``1">
            <summary>
            Add a tag that will be added to the entity when calling <see cref="M:Friflo.Engine.ECS.CreateEntityBatch.CreateEntity"/>. 
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.CreateEntityBatch.AddTags(Friflo.Engine.ECS.Tags@)">
            <summary>
            Adds the given <paramref name="tags"/> that will be added to the entity when calling <see cref="M:Friflo.Engine.ECS.CreateEntityBatch.CreateEntity"/>. 
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.BatchAlreadyAppliedException">
            <summary>
            Is thrown if using a batch returned by <see cref="M:Friflo.Engine.ECS.Entity.Batch"/> after calling <see cref="M:Friflo.Engine.ECS.EntityBatch.Apply"/>.
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.EntityBatch">
            <summary>
            An entity batch is a container of component and tag commands that can be <see cref="M:Friflo.Engine.ECS.EntityBatch.Apply"/>'ed to an entity.<br/>
            It can be used on a single entity via <see cref="M:Friflo.Engine.ECS.Entity.Batch"/> or as a <b>bulk operation</b> an a set of entities.
            </summary>
            <remarks>
            Its purpose is to optimize add / remove component and tag changes on entities.<br/>
            The same entity changes can be performed with the <see cref="T:Friflo.Engine.ECS.Entity"/> methods using:<br/>
            <see cref="M:Friflo.Engine.ECS.Entity.AddComponent``1"/>, <see cref="M:Friflo.Engine.ECS.Entity.RemoveComponent``1"/>,
            <see cref="M:Friflo.Engine.ECS.Entity.AddTag``1"/> or <see cref="M:Friflo.Engine.ECS.Entity.RemoveTag``1"/>.<br/>
            Each of these methods may cause a structural change which is a relative costly operation in comparison to others.<br/>
            Using a batch minimize theses structural changes to one or none.<br/>
            <br/>
            <b>Bulk operation</b><br/>
            To perform a batch on multiple entities you can use <see cref="M:Friflo.Engine.ECS.QueryEntities.ApplyBatch(Friflo.Engine.ECS.EntityBatch)"/> for <br/>
            - the entities of an <see cref="T:Friflo.Engine.ECS.ArchetypeQuery"/> using <see cref="P:Friflo.Engine.ECS.ArchetypeQuery.Entities"/>.
              See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#entitybatch---query">Example.</a><br/>
            - all entities of an <see cref="T:Friflo.Engine.ECS.EntityStore"/> using <see cref="P:Friflo.Engine.ECS.EntityStore.Entities"/>.<br/>
            - or the entities of an <see cref="T:Friflo.Engine.ECS.Archetype"/> using <see cref="P:Friflo.Engine.ECS.Archetype.Entities"/>.<br/>
            To perform a batch on entities in an <see cref="T:Friflo.Engine.ECS.EntityList"/> you can use <see cref="M:Friflo.Engine.ECS.EntityList.ApplyBatch(Friflo.Engine.ECS.EntityBatch)"/>.
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#entitybatch---entitylist">Example.</a><br/>
            </remarks>
        </member>
        <member name="P:Friflo.Engine.ECS.EntityBatch.CommandCount">
            <summary>
            Return the number of commands stored in the <see cref="T:Friflo.Engine.ECS.EntityBatch"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityBatch.#ctor">
            <summary>
            Creates a batch that can be applied to a <b>single</b> entity or a set of entities using a <b>bulk operation</b>.<br/>
            The created batch instance can be cached.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityBatch.Clear">
            <summary>
            Clear all commands currently stored in the <see cref="T:Friflo.Engine.ECS.EntityBatch"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityBatch.Apply">
            <summary>
            Apply added batch commands to the entity the preceding <see cref="M:Friflo.Engine.ECS.Entity.Batch"/> operates.<br/>
            <br/>
            Subsequent use of the batch throws <see cref="T:Friflo.Engine.ECS.BatchAlreadyAppliedException"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityBatch.ApplyTo(Friflo.Engine.ECS.Entity)">
            <summary>
            Apply the batch commands to the given <paramref name="entity"/>.<br/>
            The stored batch commands are not cleared.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityBatch.Add``1(``0@)">
            <summary>
            Adds an add component command to the <see cref="T:Friflo.Engine.ECS.EntityBatch"/> with the given <paramref name="component"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityBatch.Remove``1">
            <summary> 
            Adds a remove component command to the <see cref="T:Friflo.Engine.ECS.EntityBatch"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityBatch.AddTag``1">
            <summary>
            Adds an add tag command to the <see cref="T:Friflo.Engine.ECS.EntityBatch"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityBatch.AddTags(Friflo.Engine.ECS.Tags@)">
            <summary>
            Adds an add tags command to the <see cref="T:Friflo.Engine.ECS.EntityBatch"/> adding the given <paramref name="tags"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityBatch.RemoveTag``1">
            <summary>
            Adds a remove tag command to the <see cref="T:Friflo.Engine.ECS.EntityBatch"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityBatch.RemoveTags(Friflo.Engine.ECS.Tags@)">
            <summary>
            Adds a remove tags command to the <see cref="T:Friflo.Engine.ECS.EntityBatch"/> removing the given <paramref name="tags"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityBatch.Enable">
            <summary>
            Enables an entity.<br/>
            Enabled entities are included in query results.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityBatch.Disable">
            <summary>
            Disables an entity.<br/>
            <see cref="T:Friflo.Engine.ECS.Disabled"/> entities are not included query results.
            To include them use <see cref="M:Friflo.Engine.ECS.ArchetypeQuery.WithDisabled"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityBatch.RemoveComponent``1">
            <summary> Obsolete - use renamed method: <see cref="M:Friflo.Engine.ECS.EntityBatch.Remove``1"/> </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityBatch.AddComponent``1(``0)">
            <summary> Obsolete - use renamed method: <see cref="M:Friflo.Engine.ECS.EntityBatch.Add``1(``0@)"/> </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.EntityList">
            <summary>
            A list of entities of a specific <see cref="T:Friflo.Engine.ECS.EntityStore"/> used to apply changes to all entities in the container.<br/>
            Its recommended to reuse instances of this class to avoid unnecessary allocations.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#entitybatch---entitylist">Example.</a>
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.EntityList.Count">
            <summary> Returns the number of entities stored in the container. </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.EntityList.Ids">
            <summary> Return the ids of entities stored in the container. </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityList.#ctor(Friflo.Engine.ECS.EntityStore)">
            <summary>
            Creates a container to store entities of the given <paramref name="store"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityList.Clear">
            <summary> Removes all entities from the <see cref="T:Friflo.Engine.ECS.EntityList"/>. </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityList.Add(Friflo.Engine.ECS.Entity)">
            <summary>
            Adds the given <paramref name="entity"/> to the end of the <see cref="T:Friflo.Engine.ECS.EntityList"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityList.Add(System.Int32)">
            <summary>
            Adds the entity with the given <paramref name="id"/> to the end of the <see cref="T:Friflo.Engine.ECS.EntityList"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityList.AddTree(Friflo.Engine.ECS.Entity)">
            <summary>
            Adds the <paramref name="entity"/> and recursively all child entities of the given <paramref name="entity"/>
            to the end of the <see cref="T:Friflo.Engine.ECS.EntityList"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityList.ApplyAddTags(Friflo.Engine.ECS.Tags@)">
            <summary>
            Adds the given <paramref name="tags"/> to all entities in the <see cref="T:Friflo.Engine.ECS.EntityList"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityList.ApplyRemoveTags(Friflo.Engine.ECS.Tags@)">
            <summary>
            Removes the given <paramref name="tags"/> from all entities in the <see cref="T:Friflo.Engine.ECS.EntityList"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityList.ApplyBatch(Friflo.Engine.ECS.EntityBatch)">
            <summary>
            Apply the the given <paramref name="batch"/> to all entities in the <see cref="T:Friflo.Engine.ECS.EntityList"/>. 
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.EntityList.IsReadOnly">
            <summary> Gets a value indicating whether the <see cref="T:System.Collections.ICollection"/> is read-only. </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.EntityList.Item(System.Int32)">
            <summary> Return the entity at the given <paramref name="index"/>.</summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityList.Remove(Friflo.Engine.ECS.Entity)">
            <summary> not implemented </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityList.IndexOf(Friflo.Engine.ECS.Entity)">
            <summary> not implemented </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityList.Insert(System.Int32,Friflo.Engine.ECS.Entity)">
            <summary> not implemented </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityList.RemoveAt(System.Int32)">
            <summary> not implemented </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityList.Contains(Friflo.Engine.ECS.Entity)">
            <summary> not implemented </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityList.CopyTo(Friflo.Engine.ECS.Entity[],System.Int32)">
            <summary>
            Copies the entities of the <see cref="T:Friflo.Engine.ECS.EntityList"/> to an <see cref="T:Friflo.Engine.ECS.Entity"/>[], starting at the given <paramref name="index"/>
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Friflo.Engine.ECS.EntityList"/>. 
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.EntityListEnumerator">
            <summary>
            Enumerates the entities of an <see cref="T:Friflo.Engine.ECS.EntityList"/>.
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.Collections.ExplorerItem">
            <summary>
            Implements same interfaces as <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> to act as a replacement
            for this container class using the generic type <see cref="T:Friflo.Engine.ECS.Collections.ExplorerItem"/>.<br/>
            <br/>
            This enables displaying and mutation of <see cref="P:Friflo.Engine.ECS.Collections.ExplorerItem.Entity"/>'s in a
            <a href="https://github.com/AvaloniaUI/Avalonia.Controls.TreeDataGrid">Avalonia.Controls.TreeDataGrid</a>.<br/>
            A specialized implementation of this control is the <b>ExplorerTreeDataGrid</b> in this repository.
            </summary>
            <remarks>
            It seems a common and reasonable approach that other UI frameworks like <b>MAUI</b> or <b>UNO Platform</b> provide<br/>
            TreeView controls by using TreeView items implementing <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> and
            optionally <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.<br/>
            <br/>
            Major advantages of this approach.
            <list type="bullet">
              <item>
                Support millions of items within a TreeView hierarchy without any UI stuttering.
              </item>
              <item>
                Enabling binding hierarchical data to a UI without the need of 3rd party libraries in the data layer.<br/>
                <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> and optionally <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> of the BCL are sufficient.
              </item>
            </list>
            </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.Collections.ExplorerItemTree.GetItemById(System.Int32)">
            <summary>Get <see cref="T:Friflo.Engine.ECS.Collections.ExplorerItem"/> by id</summary>
            <remarks>
            <c>Avalonia.Controls.TreeDataGridItemsSourceView"</c> create items on demand => create <see cref="T:Friflo.Engine.ECS.Collections.ExplorerItem"/> if not present. 
            </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.Collections.ExplorerItemTree.ChildEntitiesChangedHandler(Friflo.Engine.ECS.ChildEntitiesChanged)">
            <summary>
            Fires a <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> event based on the
            given <see cref="T:Friflo.Engine.ECS.ChildEntitiesChanged"/>.
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.CommandBuffer">
            <summary>
            A command buffer enables recording entity changes on <b>arbitrary</b> threads.<br/>
            These changes are executed by calling <see cref="M:Friflo.Engine.ECS.CommandBuffer.Playback"/> on the <b>main</b> thread.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#commandbuffer">Example.</a>
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.CommandBuffer.ComponentCommandsCount">
            <summary> Return the number of recorded components commands. </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.CommandBuffer.TagCommandsCount">
            <summary> Return the number of recorded tag commands. </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.CommandBuffer.ScriptCommandsCount">
            <summary> Return the number of recorded script commands. </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.CommandBuffer.ChildCommandsCount">
            <summary> Return the number of recorded add / remove child commands. </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.CommandBuffer.EntityCommandsCount">
            <summary> Return the number of recorded entity commands. </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.CommandBuffer.ReuseBuffer">
            <summary>
            Set <see cref="P:Friflo.Engine.ECS.CommandBuffer.ReuseBuffer"/> = true to reuse a <see cref="T:Friflo.Engine.ECS.CommandBuffer"/> instance for multiple <see cref="M:Friflo.Engine.ECS.CommandBuffer.Playback"/>'s.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.CommandBuffer.Playback">
            <summary>
            Execute recorded entity changes. <see cref="M:Friflo.Engine.ECS.CommandBuffer.Playback"/> must be called on the <b>main</b> thread.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#commandbuffer">Example.</a>
            </summary>
            <exception cref="T:System.InvalidOperationException">
            When recording commands after calling <see cref="M:Friflo.Engine.ECS.CommandBuffer.Playback"/>.<br/>
            To reuse a <see cref="T:Friflo.Engine.ECS.CommandBuffer"/> instance set <see cref="P:Friflo.Engine.ECS.CommandBuffer.ReuseBuffer"/> = true.
            </exception>
        </member>
        <member name="M:Friflo.Engine.ECS.CommandBuffer.ReturnBuffer">
            <summary>
            Return the resources of the <see cref="T:Friflo.Engine.ECS.CommandBuffer"/> to the <see cref="T:Friflo.Engine.ECS.EntityStore"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.CommandBuffer.AddComponent``1(System.Int32)">
            <summary>
            Add the <see cref="T:Friflo.Engine.ECS.IComponent"/> with type <typeparamref name="T"/> to the entity with the passed <paramref name="entityId"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.CommandBuffer.AddComponent``1(System.Int32,``0@)">
            <summary>
            Add the given <paramref name="component"/> with type <typeparamref name="T"/> to the entity with the passed <paramref name="entityId"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.CommandBuffer.SetComponent``1(System.Int32,``0@)">
            <summary>
            Set the given <paramref name="component"/> with type <typeparamref name="T"/> of the entity with the passed <paramref name="entityId"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.CommandBuffer.RemoveComponent``1(System.Int32)">
            <summary>
            Remove the <see cref="T:Friflo.Engine.ECS.IComponent"/> with type <typeparamref name="T"/> from the entity with the passed <paramref name="entityId"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.CommandBuffer.AddTag``1(System.Int32)">
            <summary>
            Add the <see cref="T:Friflo.Engine.ECS.ITag"/> with type <typeparamref name="T"/> to the entity with the passed <paramref name="entityId"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.CommandBuffer.AddTags(System.Int32,Friflo.Engine.ECS.Tags@)">
            <summary>
            Add the <paramref name="tags"/> to the entity with the passed <paramref name="entityId"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.CommandBuffer.RemoveTag``1(System.Int32)">
            <summary>
            Remove the <see cref="T:Friflo.Engine.ECS.ITag"/> with type <typeparamref name="T"/> from the entity with the passed <paramref name="entityId"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.CommandBuffer.RemoveTags(System.Int32,Friflo.Engine.ECS.Tags@)">
            <summary>
            Remove the <paramref name="tags"/> from the entity with the passed <paramref name="entityId"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.CommandBuffer.AddScript``1(System.Int32,``0)">
            <summary>
            Add the given <paramref name="script"/> to the entity with the passed <paramref name="entityId"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.CommandBuffer.RemoveScript``1(System.Int32)">
            <summary>
            Remove the <see cref="T:Friflo.Engine.ECS.Script"/> of the specified type <typeparamref name="T"/> from the entity with the passed <paramref name="entityId"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.CommandBuffer.AddChild(System.Int32,System.Int32)">
            <summary>
            Add the entity with the given <paramref name="childId"/> as a child to the entity with the passed <paramref name="parentId"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.CommandBuffer.RemoveChild(System.Int32,System.Int32)">
            <summary>
            Remove the child entity with given <paramref name="childId"/> from the parent entity with the the passed <paramref name="parentId"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.CommandBuffer.CreateEntity">
            <summary>
            Creates a new entity on <see cref="M:Friflo.Engine.ECS.CommandBuffer.Playback"/> which will have the returned entity id.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.CommandBuffer.DeleteEntity(System.Int32)">
            <summary>
            Deletes the entity with the passed <paramref name="entityId"/> on <see cref="M:Friflo.Engine.ECS.CommandBuffer.Playback"/>.
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.EntityStore">
            <summary>
            An <see cref="T:Friflo.Engine.ECS.EntityStore"/> is a container for <see cref="T:Friflo.Engine.ECS.Entity"/>'s their components, scripts, tags
            and the tree structure.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#entitystore">Example.</a>
            </summary>
            <remarks>
            The <see cref="T:Friflo.Engine.ECS.EntityStore"/> provide the features listed below
            <list type="bullet">
              <item>
              Store a map (container) of entities in linear memory.<br/>
              Entity data can retrieved by entity <b>id</b> using the property <see cref="M:Friflo.Engine.ECS.EntityStore.GetEntityById(System.Int32)"/>.<br/>
              <see cref="T:Friflo.Engine.ECS.Entity"/>'s have the states below:<br/>
              <list type="bullet">
                <item>
                  <see cref="T:Friflo.Engine.ECS.StoreOwnership"/>: <see cref="F:Friflo.Engine.ECS.StoreOwnership.attached"/> / <see cref="F:Friflo.Engine.ECS.StoreOwnership.detached"/><br/>
                  if <see cref="F:Friflo.Engine.ECS.StoreOwnership.detached"/> - <see cref="T:System.NullReferenceException"/> are thrown by <see cref="T:Friflo.Engine.ECS.Entity"/> properties and methods.
                </item>
                <item>
                  <see cref="T:Friflo.Engine.ECS.TreeMembership"/>: <see cref="F:Friflo.Engine.ECS.TreeMembership.treeNode"/> / <see cref="F:Friflo.Engine.ECS.TreeMembership.floating"/> node (not part of the <see cref="T:Friflo.Engine.ECS.EntityStore"/> tree graph).<br/>
                  All children of a <see cref="F:Friflo.Engine.ECS.TreeMembership.treeNode"/> are <see cref="F:Friflo.Engine.ECS.TreeMembership.treeNode"/>'s themselves.
                </item>
                </list>
              </item>
              <item>Manage a tree graph of entities which starts with the <see cref="P:Friflo.Engine.ECS.EntityStore.StoreRoot"/> entity to build up a scene graph.</item>
              <item>Store the data of <see cref="T:Friflo.Engine.ECS.IComponent"/>'s and <see cref="T:Friflo.Engine.ECS.Script"/>'s.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStore.GetCommandBuffer">
            <summary>
            Returns a <see cref="T:Friflo.Engine.ECS.CommandBuffer"/> used to record and <see cref="M:Friflo.Engine.ECS.CommandBuffer.Playback"/> entity changes. 
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStore.UpdateEntityNodes(System.ReadOnlySpan{System.Int32},System.Collections.Generic.List{System.Int64})">
            update EntityNode.pid of the child nodes
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStore.GetEntitySchema">
            <summary>
            Return the <see cref="T:Friflo.Engine.ECS.EntitySchema"/> containing all available
            <see cref="T:Friflo.Engine.ECS.IComponent"/>, <see cref="T:Friflo.Engine.ECS.ITag"/> and <see cref="T:Friflo.Engine.ECS.Script"/> types.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStore.CreateEntity">
            <summary>
            Create and return a new <see cref="T:Friflo.Engine.ECS.Entity"/> in the entity store.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#entity">Example.</a>
            </summary>
            <returns>An <see cref="F:Friflo.Engine.ECS.StoreOwnership.attached"/> and <see cref="F:Friflo.Engine.ECS.TreeMembership.floating"/> entity</returns>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStore.CreateEntity(System.Int32)">
            <summary>
            Create and return new <see cref="T:Friflo.Engine.ECS.Entity"/> with the passed <paramref name="id"/> in the entity store.
            </summary>
            <returns>an <see cref="F:Friflo.Engine.ECS.StoreOwnership.attached"/> and <see cref="F:Friflo.Engine.ECS.TreeMembership.floating"/> entity</returns>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStore.CloneEntity(Friflo.Engine.ECS.Entity)">
            <summary>
            Create and return a clone of the of the passed <paramref name="entity"/> in the store.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStore.CreateEntityNode(Friflo.Engine.ECS.Archetype,System.Int32,System.Int64)">
            <summary>expect <see cref="F:Friflo.Engine.ECS.EntityStore.nodes"/> Length > id</summary> 
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStore.SetStoreRoot(Friflo.Engine.ECS.Entity)">
            <summary>
            Set the passed <paramref name="entity"/> as the <see cref="P:Friflo.Engine.ECS.EntityStore.StoreRoot"/> entity.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStore.EnsureCapacity(System.Int32)">
            <summary>
            Allocates memory for entities in the store to enable creating entities without reallocation.
            </summary>
            <returns>The number of entities that can be added without reallocation. </returns>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStore.SetRandomSeed(System.Int32)">
            <summary>
            Set the seed used to create random entity <see cref="P:Friflo.Engine.ECS.Entity.Pid"/>'s for an entity store <br/>
            created with <see cref="T:Friflo.Engine.ECS.PidType"/> == <see cref="F:Friflo.Engine.ECS.PidType.RandomPids"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStore.DeleteNode(System.Int32)">
            <remarks> Set <see cref="F:Friflo.Engine.ECS.EntityNode.archetype"/> = null. </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStore.AddScript(Friflo.Engine.ECS.Entity,Friflo.Engine.ECS.Script,Friflo.Engine.ECS.ScriptType)">
            <remarks>
            - SEND_EVENT notes -
            <br/>
            Send event must be last statement <b>AFTER</b> an entity mutation has finished.<br/>
            This ensures preserving a valid entity state after an add / remove mutation has finished.<br/>
            Reasons: <br/>
            - Event handlers expect a valid entity state after add / remove mutation.<br/> 
            - When sending an event to the event handlers any of them may throw an exception.
              So this exception will not result in an invalid entity state.<br/>
            <br/> 
            The entity state refers to:
            <list type="bullet">
              <item><see cref="P:Friflo.Engine.ECS.Entity.refArchetype"/></item>
              <item><see cref="P:Friflo.Engine.ECS.Entity.refCompIndex"/></item>
              <item><see cref="P:Friflo.Engine.ECS.Entity.refScriptIndex"/></item>
              <item><see cref="F:Friflo.Engine.ECS.RawEntity.archIndex"/></item>
            </list>
            </remarks>
        </member>
        <member name="P:Friflo.Engine.ECS.EntityStore.StoreRoot">
            <summary> Return the root <see cref="T:Friflo.Engine.ECS.Entity"/> of the store.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.EntityStore.EntityScripts">
            <summary> Return all <see cref="T:Friflo.Engine.ECS.Script"/>'s added to <see cref="T:Friflo.Engine.ECS.Entity"/>'s in the <see cref="T:Friflo.Engine.ECS.EntityStore"/>. </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.EntityStore.Entities">
            <summary> Return all <see cref="T:Friflo.Engine.ECS.Entity"/>'s stored in the <see cref="T:Friflo.Engine.ECS.EntityStore"/>.</summary>
            <remarks>Property is mainly used for debugging.<br/>
            For efficient access to entity <see cref="T:Friflo.Engine.ECS.IComponent"/>'s use one of the generic <b><c>EntityStore.Query()</c></b> methods. </remarks>
        </member>
        <member name="P:Friflo.Engine.ECS.EntityStore.EventRecorder">
            <summary>
            Record adding/removing of components/tags to/from entities if <see cref="P:Friflo.Engine.ECS.EventRecorder.Enabled"/> is true.<br/>
            It is required to filter these events using an <see cref="T:Friflo.Engine.ECS.EventFilter"/>.
            </summary>
        </member>
        <member name="E:Friflo.Engine.ECS.EntityStore.OnChildEntitiesChanged">
            <summary>Add / remove an event handler for <see cref="T:Friflo.Engine.ECS.ChildEntitiesChanged"/> events triggered by:<br/>
            <see cref="M:Friflo.Engine.ECS.Entity.AddChild(Friflo.Engine.ECS.Entity)"/> <br/> <see cref="M:Friflo.Engine.ECS.Entity.InsertChild(System.Int32,Friflo.Engine.ECS.Entity)"/> <br/> <see cref="M:Friflo.Engine.ECS.Entity.RemoveChild(Friflo.Engine.ECS.Entity)"/>.</summary>
        </member>
        <member name="E:Friflo.Engine.ECS.EntityStore.OnScriptAdded">
            <summary>Add / remove an event handler for <see cref="T:Friflo.Engine.ECS.ScriptChanged"/> events triggered by:<br/>
            <see cref="M:Friflo.Engine.ECS.Entity.AddScript``1(``0)"/>.</summary>
        </member>
        <member name="E:Friflo.Engine.ECS.EntityStore.OnScriptRemoved">
            <summary>Add / remove an event handler for <see cref="T:Friflo.Engine.ECS.ScriptChanged"/> events triggered by:<br/>
            <see cref="M:Friflo.Engine.ECS.Entity.RemoveScript``1"/> .</summary>
        </member>
        <member name="E:Friflo.Engine.ECS.EntityStore.OnEntitiesChanged">
            <summary> Fire events in case an <see cref="T:Friflo.Engine.ECS.Entity"/> changed. </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.EntityStore.entityScripts">
            <summary>Contains implicit all entities with one or more <see cref="T:Friflo.Engine.ECS.Script"/>'s to minimize iteration cost for <see cref="M:Friflo.Engine.ECS.Script.Update"/>.</summary>
        </member>
        <member name="F:Friflo.Engine.ECS.EntityStore.entityScriptCount">
            <summary>Count of entities with one or more <see cref="T:Friflo.Engine.ECS.Script"/>'s</summary>
        </member>
        <member name="T:Friflo.Engine.ECS.EntityStore.Intern">
            <summary>Contains state of <see cref="T:Friflo.Engine.ECS.EntityStore"/> not relevant for application development.</summary>
            <remarks>Declaring internal state fields in this struct remove noise in debugger.</remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStore.PidToId(System.Int64)">
            <summary>
            Return the <see cref="F:Friflo.Engine.ECS.Entity.Id"/> for the passed entity <paramref name="pid"/>.
            </summary>
            <remarks>
            Avoid using this method if store is initialized with <see cref="F:Friflo.Engine.ECS.PidType.RandomPids"/>.<br/>
            Instead use <see cref="F:Friflo.Engine.ECS.Entity.Id"/> instead of <see cref="P:Friflo.Engine.ECS.Entity.Pid"/> if possible
            as this method performs a <see cref="T:System.Collections.Generic.Dictionary`2"/> lookup.
            </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStore.IdToPid(System.Int32)">
            <summary>
            Return the <see cref="P:Friflo.Engine.ECS.Entity.Pid"/> for the passed entity <paramref name="id"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStore.GetEntityNode(System.Int32)">
            <summary>
            Return the internal node for the passed entity <paramref name="id"/>. 
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStore.GetEntityById(System.Int32)">
            <summary>
            Return the <see cref="T:Friflo.Engine.ECS.Entity"/> with the passed entity <paramref name="id"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStore.GetEntityByPid(System.Int64)">
            <summary>
            Return the <see cref="T:Friflo.Engine.ECS.Entity"/> with the passed entity <paramref name="pid"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityStore.TryGetEntityByPid(System.Int64,Friflo.Engine.ECS.Entity@)">
            <summary>
            Try to return the <see cref="T:Friflo.Engine.ECS.Entity"/> with the passed entity <paramref name="pid"/>.<br/>
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.EntityName">
            <summary>
            Can be added to an <see cref="T:Friflo.Engine.ECS.Entity"/> to provide a descriptive name for debugging or in an editor.
            </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.EntityName.value">
            <summary>Descriptive entity name for debugging or in an editor.</summary>
        </member>
        <member name="T:Friflo.Engine.ECS.UniqueEntity">
            <summary>
            A <see cref="T:Friflo.Engine.ECS.UniqueEntity"/> is used to assign a unique <c>string</c> to an entity within an <see cref="T:Friflo.Engine.ECS.EntityStore"/>.
            </summary>
            <remarks>
            To find a <see cref="T:Friflo.Engine.ECS.UniqueEntity"/> within an <see cref="T:Friflo.Engine.ECS.EntityStore"/> use <see cref="M:Friflo.Engine.ECS.EntityStoreBase.GetUniqueEntity(System.String)"/>.<br/>
            It basically acts as a singleton within an <see cref="T:Friflo.Engine.ECS.EntityStore"/>. 
            </remarks>
        </member>
        <member name="F:Friflo.Engine.ECS.UniqueEntity.uid">
            <summary>Unique string identifier assigned to specific <see cref="T:Friflo.Engine.ECS.Entity"/></summary>
        </member>
        <member name="T:Friflo.Engine.ECS.Unresolved">
            <summary>
            <see cref="T:Friflo.Engine.ECS.Unresolved"/> is a container for unresolved entity components.
            </summary>
            <remarks>
            An <see cref="T:Friflo.Engine.ECS.Unresolved"/> component is added to an <see cref="T:Friflo.Engine.ECS.Entity"/> by <see cref="M:Friflo.Engine.ECS.Serialize.EntityConverter.DataEntityToEntity(Friflo.Engine.ECS.Serialize.DataEntity,Friflo.Engine.ECS.EntityStore,System.String@)"/> if:<br/>
            <list type="bullet">
              <item>
                A component in <see cref="T:Friflo.Engine.ECS.Serialize.DataEntity"/>.<see cref="F:Friflo.Engine.ECS.Serialize.DataEntity.components"/> cannot be resolved to an <see cref="T:Friflo.Engine.ECS.IComponent"/> or <see cref="T:Friflo.Engine.ECS.Script"/> type. 
              </item>
              <item>
                A tag in <see cref="T:Friflo.Engine.ECS.Serialize.DataEntity"/>.<see cref="F:Friflo.Engine.ECS.Serialize.DataEntity.tags"/>  cannot be resolved to an <see cref="T:Friflo.Engine.ECS.ITag"/> type.
              </item>
            </list>
            The <see cref="T:Friflo.Engine.ECS.Unresolved"/> component enables conversion of a <see cref="T:Friflo.Engine.ECS.Serialize.DataEntity"/> to an <see cref="T:Friflo.Engine.ECS.Entity"/> and vice versa<br/>
            with components or tags that cannot be resolved to <see cref="T:Friflo.Engine.ECS.ITag"/>, <see cref="T:Friflo.Engine.ECS.IComponent"/> and <see cref="T:Friflo.Engine.ECS.Script"/> types.<br/>
            <br/>
            Having support <see cref="T:Friflo.Engine.ECS.Unresolved"/> component or tag types:
            <list type="bullet">
              <item>
                Ensures the ability to use an <see cref="T:Friflo.Engine.ECS.EntityStore"/> containing unresolved types without being blocked by a missing fix.
              </item>
              <item>
                Prevents data loss of tags or components when storing an <see cref="T:Friflo.Engine.ECS.EntityStore"/> with entities containing unresolved tag or component types.
              </item>
            </list>
            The reason for unresolved tag or component types can be:<br/>
            <list type="bullet">
              <item>
                Missed to merge C# code containing an <see cref="T:Friflo.Engine.ECS.ITag"/>, an <see cref="T:Friflo.Engine.ECS.IComponent"/> or <see cref="T:Friflo.Engine.ECS.Script"/> type definition.
              </item>
              <item>
                Intentionally when creating an <see cref="T:Friflo.Engine.ECS.EntityStore"/> with external tools without the need to wait for the implementation of new<br/>
                <see cref="T:Friflo.Engine.ECS.ITag"/>, an <see cref="T:Friflo.Engine.ECS.IComponent"/> or <see cref="T:Friflo.Engine.ECS.Script"/> type definitions.
              </item>
            </list>
            </remarks>
        </member>
        <member name="T:Friflo.Engine.ECS.UnresolvedComponent">
            <summary>
            Is used as item type for <see cref="T:Friflo.Engine.ECS.Unresolved"/>.<see cref="F:Friflo.Engine.ECS.Unresolved.components"/> storing unresolved entity components.
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.Entity">
            <summary>
            Represent an object in an <see cref="T:Friflo.Engine.ECS.EntityStore"/> - e.g. a cube in a game scene.<br/>
            It is the <b>main API</b> to deal with entities in the engine.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#entity">Example.</a>
            </summary>
            <remarks>
            <para>
            Every <see cref="T:Friflo.Engine.ECS.Entity"/> has an <see cref="F:Friflo.Engine.ECS.Entity.Id"/> and is a container of
            <see cref="T:Friflo.Engine.ECS.Tags"/>, <see cref="T:Friflo.Engine.ECS.IComponent"/>'s, <see cref="T:Friflo.Engine.ECS.Script"/>'s and other child <see cref="T:Friflo.Engine.ECS.Entity"/>'s.<br/>
            <br/>
            Comparison to other game engines.
            <list type="bullet">
                <item>
                    <b>Unity</b>  - an <see cref="T:Friflo.Engine.ECS.Entity"/> provides a similar features set as a <c>GameObject</c> and their ECS <c>Entity</c>.
                </item>
                <item>
                    <b>Godot</b>  - <see cref="T:Friflo.Engine.ECS.Entity"/> is the counterpart of a <c>Node</c>.<br/>
                    The key difference is Godot is an OOP architecture inheriting from <c>Node</c> over multiple levels.
                </item>
                <item>
                    <b>FLAX</b>   - <see cref="T:Friflo.Engine.ECS.Entity"/> is the counterpart of an <c>Actor</c> - an OOP architecture like Godot.
                </item>
                <item>
                    <b>STRIDE</b> - <see cref="T:Friflo.Engine.ECS.Entity"/> is the counterpart of a STRIDE <c>Entity</c> - a component based architecture like Unity.<br/>
                    In contrast to this engine or Unity it has no ECS architecture - Entity Component System.
                </item>
            </list>
            </para>
            <para>
            <b>Components</b>
            <br/>
            An <see cref="T:Friflo.Engine.ECS.Entity"/> is typically an object that can be rendered on screen like a cube, sphere, capsule, mesh, sprite, ... .<br/>
            Therefore a renderable component needs to be added with <see cref="M:Friflo.Engine.ECS.Entity.AddComponent``1"/> to an <see cref="T:Friflo.Engine.ECS.Entity"/>.<br/>
            <br/>
            <b>Child entities</b>
            <br/>
            An <see cref="T:Friflo.Engine.ECS.Entity"/> can be added to another <see cref="T:Friflo.Engine.ECS.Entity"/> using <see cref="M:Friflo.Engine.ECS.Entity.AddChild(Friflo.Engine.ECS.Entity)"/>.<br/>
            The added <see cref="T:Friflo.Engine.ECS.Entity"/> becomes a child of the <see cref="T:Friflo.Engine.ECS.Entity"/> it is added to - its <see cref="P:Friflo.Engine.ECS.Entity.Parent"/>.<br/>
            This enables to build up a complex game scene with a hierarchy of <see cref="T:Friflo.Engine.ECS.Entity"/>'s.<br/>
            The order of children contained by an entity is the insertion order.<br/>  
            <br/>
            <b>Scripts</b>
            <br/>
            A <see cref="T:Friflo.Engine.ECS.Script"/>'s can be added to an <see cref="T:Friflo.Engine.ECS.Entity"/> to add custom logic (script) and data to an entity.<br/>
            <see cref="T:Friflo.Engine.ECS.Script"/>'s are added or removed with <see cref="M:Friflo.Engine.ECS.Entity.AddScript``1(``0)"/> / <see cref="M:Friflo.Engine.ECS.Entity.RemoveScript``1"/>.<br/>
            <br/>
            <b>Tags</b>
            <br/>
            <see cref="P:Friflo.Engine.ECS.Entity.Tags"/> can be added to an <see cref="T:Friflo.Engine.ECS.Entity"/> to enable filtering entities in queries.<br/>
            By adding <see cref="P:Friflo.Engine.ECS.Entity.Tags"/> to an <see cref="T:Friflo.Engine.ECS.ArchetypeQuery"/> it can be restricted to return only entities matching the
            these <see cref="P:Friflo.Engine.ECS.Entity.Tags"/>.<br/>
            <br/>
            <b>Events</b>
            <br/>
            All entity changes - aka mutations - can be observed for specific <see cref="T:Friflo.Engine.ECS.Entity"/>'s and the whole <see cref="T:Friflo.Engine.ECS.EntityStore"/>.<br/>
            In detail the following changes can be observed.
            <list type="table">
              <listheader>
                <term>type</term>
                <term>entity event</term>
                <term>event argument</term>
                <term>action</term>
              </listheader>
              <item>
                <description>component</description>
                <description><see cref="E:Friflo.Engine.ECS.Entity.OnComponentChanged"/></description>
                <description><see cref="T:Friflo.Engine.ECS.ComponentChanged"/></description>
                <description>
                  <see cref="F:Friflo.Engine.ECS.ComponentChangedAction.Add"/>, <see cref="F:Friflo.Engine.ECS.ComponentChangedAction.Update"/>, <see cref="F:Friflo.Engine.ECS.ComponentChangedAction.Remove"/>
                </description>
              </item>
              <item>
                <description>script</description>
                <description><see cref="E:Friflo.Engine.ECS.Entity.OnScriptChanged"/></description>
                <description><see cref="T:Friflo.Engine.ECS.ScriptChanged"/></description>
                <description>
                  <see cref="F:Friflo.Engine.ECS.ScriptChangedAction.Remove"/>, <see cref="F:Friflo.Engine.ECS.ScriptChangedAction.Add"/>, <see cref="F:Friflo.Engine.ECS.ScriptChangedAction.Replace"/>
                </description>
              </item>
              <item>
                <description>tags</description>
                <description><see cref="E:Friflo.Engine.ECS.Entity.OnTagsChanged"/></description>
                <description><see cref="T:Friflo.Engine.ECS.TagsChanged"/></description>
                <description>
                  <see cref="P:Friflo.Engine.ECS.TagsChanged.AddedTags"/>, <see cref="P:Friflo.Engine.ECS.TagsChanged.RemovedTags"/>
                </description>
              </item>
              <item>
                <description>child entity</description>
                <description><see cref="E:Friflo.Engine.ECS.Entity.OnChildEntitiesChanged"/></description>
                <description><see cref="T:Friflo.Engine.ECS.ChildEntitiesChanged"/></description>
                <description>
                  <see cref="F:Friflo.Engine.ECS.ChildEntitiesChangedAction.Add"/>, <see cref="F:Friflo.Engine.ECS.ChildEntitiesChangedAction.Remove"/>
                </description>
              </item>
            </list>
            </para>
            <para>
            <b>Properties and Methods by category</b>
            <list type="bullet">
            <item>  <b>general</b>      <br/>
                <see cref="F:Friflo.Engine.ECS.Entity.Id"/>        <br/>
                <see cref="P:Friflo.Engine.ECS.Entity.Pid"/>       <br/>
                <see cref="P:Friflo.Engine.ECS.Entity.Archetype"/> <br/>
                <see cref="P:Friflo.Engine.ECS.Entity.Store"/>     <br/>
                <see cref="P:Friflo.Engine.ECS.Entity.DebugJSON"/> <br/>
            </item>
            <item>  <b>components</b> · generic             <br/>
                <see cref="M:Friflo.Engine.ECS.Entity.HasComponent``1"/>               <br/>
                <see cref="M:Friflo.Engine.ECS.Entity.GetComponent``1"/> - read / write<br/>
                <see cref="M:Friflo.Engine.ECS.Entity.TryGetComponent``1(``0@)"/>            <br/>
                <see cref="M:Friflo.Engine.ECS.Entity.AddComponent``1"/>             <br/>
                <see cref="M:Friflo.Engine.ECS.Entity.RemoveComponent``1"/>            <br/>
            </item>
            <item>  <b>components</b> · common              <br/>
                <see cref="P:Friflo.Engine.ECS.Entity.Name"/>                          <br/>
                <see cref="P:Friflo.Engine.ECS.Entity.Position"/>                      <br/>
                <see cref="P:Friflo.Engine.ECS.Entity.Rotation"/>                      <br/>
                <see cref="P:Friflo.Engine.ECS.Entity.Scale3"/>                        <br/>
                <see cref="P:Friflo.Engine.ECS.Entity.HasName"/>                       <br/>
                <see cref="P:Friflo.Engine.ECS.Entity.HasPosition"/>                   <br/>
                <see cref="P:Friflo.Engine.ECS.Entity.HasRotation"/>                   <br/>
                <see cref="P:Friflo.Engine.ECS.Entity.HasScale3"/>                     <br/>
            </item>
            <item>  <b>scripts</b>              <br/>
                <see cref="P:Friflo.Engine.ECS.Entity.Scripts"/>           <br/>
                <see cref="M:Friflo.Engine.ECS.Entity.GetScript``1"/>      <br/>
                <see cref="M:Friflo.Engine.ECS.Entity.TryGetScript``1(``0@)"/>   <br/>
                <see cref="M:Friflo.Engine.ECS.Entity.AddScript``1(``0)"/>      <br/>
                <see cref="M:Friflo.Engine.ECS.Entity.RemoveScript``1"/>   <br/>
            </item>
            <item>  <b>tags</b>                 <br/>
                <see cref="P:Friflo.Engine.ECS.Entity.Tags"/>              <br/>
                <see cref="M:Friflo.Engine.ECS.Entity.AddTag``1"/>         <br/>
                <see cref="M:Friflo.Engine.ECS.Entity.AddTags(Friflo.Engine.ECS.Tags@)"/>           <br/>
                <see cref="M:Friflo.Engine.ECS.Entity.RemoveTag``1"/>      <br/>
                <see cref="M:Friflo.Engine.ECS.Entity.RemoveTags(Friflo.Engine.ECS.Tags@)"/>        <br/>
            </item>
            <item>  <b>child entities</b>       <br/>
                <see cref="P:Friflo.Engine.ECS.Entity.Parent"/>            <br/>
                <see cref="P:Friflo.Engine.ECS.Entity.ChildEntities"/>     <br/>
                <see cref="P:Friflo.Engine.ECS.Entity.ChildIds"/>          <br/>
                <see cref="P:Friflo.Engine.ECS.Entity.ChildCount"/>        <br/>
                <see cref="M:Friflo.Engine.ECS.Entity.AddChild(Friflo.Engine.ECS.Entity)"/>          <br/>
                <see cref="M:Friflo.Engine.ECS.Entity.InsertChild(System.Int32,Friflo.Engine.ECS.Entity)"/>       <br/>
                <see cref="M:Friflo.Engine.ECS.Entity.RemoveChild(Friflo.Engine.ECS.Entity)"/>       <br/>
                <see cref="M:Friflo.Engine.ECS.Entity.DeleteEntity"/>      <br/>
                <see cref="M:Friflo.Engine.ECS.Entity.GetChildIndex(Friflo.Engine.ECS.Entity)"/>     <br/>
            </item>
            <item>  <b>events</b>                           <br/>
                <see cref="E:Friflo.Engine.ECS.Entity.OnTagsChanged"/>                 <br/>
                <see cref="E:Friflo.Engine.ECS.Entity.OnComponentChanged"/>            <br/>
                <see cref="E:Friflo.Engine.ECS.Entity.OnScriptChanged"/>               <br/>
                <see cref="E:Friflo.Engine.ECS.Entity.OnChildEntitiesChanged"/>        <br/>
                <see cref="P:Friflo.Engine.ECS.Entity.DebugEventHandlers"/>            <br/>
            </item>
            <item>  <b>signals</b>                          <br/>
                <see cref="M:Friflo.Engine.ECS.Entity.AddSignalHandler``1(System.Action{Friflo.Engine.ECS.Signal{``0}})"/>      <br/>
                <see cref="M:Friflo.Engine.ECS.Entity.RemoveSignalHandler``1(System.Action{Friflo.Engine.ECS.Signal{``0}})"/>   <br/>
                <see cref="M:Friflo.Engine.ECS.Entity.EmitSignal``1(``0@)"/>            <br/>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Friflo.Engine.ECS.Entity.Pid">
            <summary>Returns the permanent entity id used for serialization.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.Entity.Components">
            <summary>Return the <see cref="T:Friflo.Engine.ECS.IComponent"/>'s added to the entity.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.Entity.Scripts">
            <summary>Return the <see cref="T:Friflo.Engine.ECS.Script"/>'s added to the entity.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.Entity.Tags">
            <summary>Return the <see cref="T:Friflo.Engine.ECS.Tags"/> added to the entity.</summary>
            <returns>
            A copy of the <see cref="P:Friflo.Engine.ECS.Entity.Tags"/> assigned to the <see cref="T:Friflo.Engine.ECS.Entity"/>.<br/>
            <br/>
            Modifying the returned <see cref="T:Friflo.Engine.ECS.Tags"/> value does <b>not</b> affect the <see cref="T:Friflo.Engine.ECS.Entity"/>.<br/>
            Therefore use <see cref="M:Friflo.Engine.ECS.Entity.AddTag``1"/>, <see cref="M:Friflo.Engine.ECS.Entity.AddTags(Friflo.Engine.ECS.Tags@)"/>, <see cref="M:Friflo.Engine.ECS.Entity.RemoveTag``1"/> or <see cref="M:Friflo.Engine.ECS.Entity.RemoveTags(Friflo.Engine.ECS.Tags@)"/>.
            </returns>
        </member>
        <member name="P:Friflo.Engine.ECS.Entity.Archetype">
            <summary>Returns the <see cref="P:Friflo.Engine.ECS.Entity.Archetype"/> that contains the entity.</summary>
            <remarks>The <see cref="P:Friflo.Engine.ECS.Entity.Archetype"/> the entity is stored.<br/>Return null if the entity is <see cref="F:Friflo.Engine.ECS.StoreOwnership.detached"/></remarks>
        </member>
        <member name="P:Friflo.Engine.ECS.Entity.Store">
            <summary>Returns the <see cref="T:Friflo.Engine.ECS.EntityStore"/> that contains the entity.</summary>
            <remarks>The <see cref="P:Friflo.Engine.ECS.Entity.Store"/> the entity is <see cref="F:Friflo.Engine.ECS.StoreOwnership.attached"/> to. Returns null if <see cref="F:Friflo.Engine.ECS.StoreOwnership.detached"/></remarks>
        </member>
        <member name="P:Friflo.Engine.ECS.Entity.StoreOwnership">
            <remarks>If <see cref="F:Friflo.Engine.ECS.StoreOwnership.attached"/> its <see cref="P:Friflo.Engine.ECS.Entity.Store"/> and <see cref="P:Friflo.Engine.ECS.Entity.Archetype"/> are not null. Otherwise null.</remarks>
        </member>
        <member name="P:Friflo.Engine.ECS.Entity.TreeMembership">
            <returns>
            <see cref="F:Friflo.Engine.ECS.TreeMembership.treeNode"/> if the entity is member of the <see cref="T:Friflo.Engine.ECS.EntityStore"/> tree graph.<br/>
            Otherwise <see cref="F:Friflo.Engine.ECS.TreeMembership.floating"/></returns>
        </member>
        <member name="P:Friflo.Engine.ECS.Entity.DebugJSON">
            <summary> Return the <b>JSON</b> representation of an entity. </summary>
            <remarks> Counterpart of <see cref="P:Friflo.Engine.ECS.Serialize.DataEntity.DebugJSON"/> </remarks>
        </member>
        <member name="P:Friflo.Engine.ECS.Entity.Info">
            <summary> Display additional entity information like Pid, Enabled, JSON and attached event handlers.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.Entity.Enabled">
            <summary>
            Set entity to enabled/disabled by removing/adding the <see cref="T:Friflo.Engine.ECS.Disabled"/> tag.<br/>
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.Entity.Name">
            <summary>Returns the <see cref="T:Friflo.Engine.ECS.EntityName"/> reference of an entity.</summary>
            <exception cref="T:System.NullReferenceException"> if entity has no <see cref="T:Friflo.Engine.ECS.EntityName"/></exception>
        </member>
        <member name="P:Friflo.Engine.ECS.Entity.Position">
            <summary>Returns the <see cref="T:Friflo.Engine.ECS.Position"/> reference of an entity.</summary>
            <exception cref="T:System.NullReferenceException"> if entity has no <see cref="P:Friflo.Engine.ECS.Entity.Position"/></exception>
        </member>
        <member name="P:Friflo.Engine.ECS.Entity.Rotation">
            <summary>Returns the <see cref="T:Friflo.Engine.ECS.Rotation"/> reference of an entity.</summary>
            <exception cref="T:System.NullReferenceException"> if entity has no <see cref="P:Friflo.Engine.ECS.Entity.Rotation"/></exception>
        </member>
        <member name="P:Friflo.Engine.ECS.Entity.Scale3">
            <summary>Returns the <see cref="T:Friflo.Engine.ECS.Scale3"/> reference of an entity.</summary>
            <exception cref="T:System.NullReferenceException"> if entity has no <see cref="P:Friflo.Engine.ECS.Entity.Scale3"/></exception>
        </member>
        <member name="P:Friflo.Engine.ECS.Entity.HasName">
            <summary>Returns true if the entity has an <see cref="T:Friflo.Engine.ECS.EntityName"/>.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.Entity.HasPosition">
            <summary>Returns true if the entity has a <see cref="T:Friflo.Engine.ECS.Position"/>.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.Entity.HasRotation">
            <summary>Returns true if the entity has a <see cref="T:Friflo.Engine.ECS.Rotation"/>.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.Entity.HasScale3">
            <summary>Returns true if the entity has a <see cref="T:Friflo.Engine.ECS.Scale3"/>.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.Entity.ChildCount">
            <summary>Return the number of child entities.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.Entity.Parent">
            <summary>Returns the parent entity that contains the entity.</summary>
            <returns>
            null if the entity has no parent.<br/>
            <i>Note:</i>The <see cref="T:Friflo.Engine.ECS.EntityStore"/>.<see cref="P:Friflo.Engine.ECS.EntityStore.StoreRoot"/> returns always null
            </returns>
            <remarks>Executes in O(1)</remarks> 
        </member>
        <member name="P:Friflo.Engine.ECS.Entity.ChildEntities">
            <summary>Return all child entities of an entity.</summary>
            <remarks>
            Executes in O(1).<br/> Enumerate with:
            <code>
                foreach (var child in entity.ChildEntities)
            </code>
            </remarks>
        </member>
        <member name="P:Friflo.Engine.ECS.Entity.ChildIds">
            <summary>Return the ids of the child entities.</summary>
        </member>
        <member name="F:Friflo.Engine.ECS.Entity.Id">
            <summary>Unique entity id.<br/>
            Uniqueness relates to the <see cref="T:Friflo.Engine.ECS.Entity"/>'s stored in its <see cref="T:Friflo.Engine.ECS.EntityStore"/></summary>
        </member>
        <member name="M:Friflo.Engine.ECS.Entity.HasComponent``1">
            <summary>Return true if the entity contains a component of the given type.</summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Friflo.Engine.ECS.Entity.GetComponent``1">
            <summary>Return the component of the given type as a reference.</summary>
            <exception cref="T:System.NullReferenceException"> if entity has no component of Type <typeparamref name="T"/></exception>
            <remarks>Executes in O(1)</remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.Entity.TryGetComponent``1(``0@)">
            <remarks>Executes in O(1)</remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.Entity.AddComponent``1">
            <summary>
            Add a component of the given type <typeparamref name="T"/> to the entity.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#component">Example.</a>
            <br/>
            If the entity contains a component of the same type it is updated.</summary>
            <returns>true - component is newly added to the entity.<br/> false - component is updated.</returns>
            <remarks>Note: Use <see cref="M:Friflo.Engine.ECS.EntityUtils.AddEntityComponent(Friflo.Engine.ECS.Entity,Friflo.Engine.ECS.ComponentType)"/> as non generic alternative</remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.Entity.AddComponent``1(``0@)">
            <summary>
            Add the given <paramref name="component"/> to the entity.<br/>
            If the entity contains a component of the same type it is updated.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#component">Example.</a>
            </summary>
            <returns>true - component is newly added to the entity.<br/> false - component is updated.</returns>
        </member>
        <member name="M:Friflo.Engine.ECS.Entity.RemoveComponent``1">
            <summary>Remove the component of the given type from the entity.</summary>
            <returns>true if entity contained a component of the given type before</returns>
            <remarks>
            Executes in O(1)<br/>
            <remarks>Note: Use <see cref="M:Friflo.Engine.ECS.EntityUtils.RemoveEntityComponent(Friflo.Engine.ECS.Entity,Friflo.Engine.ECS.ComponentType)"/> as non generic alternative</remarks>
            </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.Entity.GetScript``1">
            <summary>Get the script of the passed <typeparamref name="TScript"/> <see cref="T:System.Type"/>.</summary>
            <returns>null if the entity has no script of the passed <typeparamref name="TScript"/> <see cref="T:System.Type"/>.</returns>
            <remarks>Note: Use <see cref="M:Friflo.Engine.ECS.EntityUtils.GetEntityScript(Friflo.Engine.ECS.Entity,Friflo.Engine.ECS.ScriptType)"/> as non generic alternative.</remarks> 
        </member>
        <member name="M:Friflo.Engine.ECS.Entity.TryGetScript``1(``0@)">
            <summary>Gets the script with the passed <typeparamref name="TScript"/> <see cref="T:System.Type"/>.</summary>
            <returns>
            Returns true if the entity has a script the passed <typeparamref name="TScript"/> <see cref="T:System.Type"/>.<br/>
            Otherwise false.
            </returns>
        </member>
        <member name="M:Friflo.Engine.ECS.Entity.AddScript``1(``0)">
            <summary>Add the given <paramref name="script"/> to the entity.<br/>
            If the entity contains a script of the same <typeparamref name="TScript"/> <see cref="T:System.Type"/> it is replaced.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#script">Example.</a>
            </summary>
            <returns>
            The script with the passed <typeparamref name="TScript"/> <see cref="T:System.Type"/> previously added to the entity.<br/>
            Return null if the entity had no script with the passed <typeparamref name="TScript"/> <see cref="T:System.Type"/>.
            </returns>
            <remarks>Note: Use <see cref="M:Friflo.Engine.ECS.EntityUtils.AddNewEntityScript(Friflo.Engine.ECS.Entity,Friflo.Engine.ECS.ScriptType)"/> as non generic alternative.</remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.Entity.RemoveScript``1">
            <summary>Remove the script with the given <typeparamref name="TScript"/> <see cref="T:System.Type"/> from the entity.</summary>
            <returns>
            The script the script with the passed <typeparamref name="TScript"/> <see cref="T:System.Type"/> previously added to the entity.<br/>
            Or null if the entity has no script with the passed <typeparamref name="TScript"/> <see cref="T:System.Type"/>.
            </returns>
            <remarks>Note: Use <see cref="M:Friflo.Engine.ECS.EntityUtils.RemoveEntityScript(Friflo.Engine.ECS.Entity,Friflo.Engine.ECS.ScriptType)"/> as non generic alternative.</remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.Entity.AddTag``1">
            <summary>
            Add the given <typeparamref name="TTag"/> to the entity.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#tag">Example.</a>
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.Entity.AddTags(Friflo.Engine.ECS.Tags@)">
            <summary>Add the given <paramref name="tags"/> to the entity.</summary>
        </member>
        <member name="M:Friflo.Engine.ECS.Entity.RemoveTag``1">
            <summary>Add the given <typeparamref name="TTag"/> from the entity.</summary>
        </member>
        <member name="M:Friflo.Engine.ECS.Entity.RemoveTags(Friflo.Engine.ECS.Tags@)">
            <summary>Remove the given <paramref name="tags"/> from the entity.</summary>
        </member>
        <member name="M:Friflo.Engine.ECS.Entity.EnableTree">
            <summary> Enable recursively all child entities of the <see cref="T:Friflo.Engine.ECS.Entity"/>. </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.Entity.DisableTree">
            <summary> Disable recursively all child entities of the <see cref="T:Friflo.Engine.ECS.Entity"/>. </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.Entity.AddChild(Friflo.Engine.ECS.Entity)">
            <summary>
            Add the given <paramref name="entity"/> as a child to the entity.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#child-entities">Example.</a>
            </summary>
            <remarks>
            Executes in O(1).<br/>If its <see cref="P:Friflo.Engine.ECS.Entity.TreeMembership"/> changes O(number of nodes in sub tree).<br/>
            The subtree structure of the added entity remains unchanged<br/>
            </remarks>
            <returns>
            The index within <see cref="P:Friflo.Engine.ECS.Entity.ChildIds"/> the <paramref name="entity"/> is added.<br/>
            -1 if the <paramref name="entity"/> is already a child entity.
            </returns>
        </member>
        <member name="M:Friflo.Engine.ECS.Entity.InsertChild(System.Int32,Friflo.Engine.ECS.Entity)">
            <summary>Insert the given <paramref name="entity"/> as a child to the entity at the passed <paramref name="index"/>.</summary>
            <remarks>
            Executes in O(1) in case <paramref name="index"/> == <see cref="P:Friflo.Engine.ECS.Entity.ChildCount"/>.<br/>
            Otherwise O(N). N = <see cref="P:Friflo.Engine.ECS.Entity.ChildCount"/> - <paramref name="index"/><br/>
            If its <see cref="P:Friflo.Engine.ECS.Entity.TreeMembership"/> changes O(number of nodes in sub tree).<br/>
            The subtree structure of the added entity remains unchanged<br/>
            </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.Entity.RemoveChild(Friflo.Engine.ECS.Entity)">
            <summary>Remove the given child <paramref name="entity"/> from the entity.</summary>
            <remarks>
            Executes in O(N) to search the entity. N = <see cref="P:Friflo.Engine.ECS.Entity.ChildCount"/><br/>
            If its <see cref="P:Friflo.Engine.ECS.Entity.TreeMembership"/> changes (in-tree / floating) O(number of nodes in sub tree).<br/>
            The subtree structure of the removed entity remains unchanged<br/>
            </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.Entity.DeleteEntity">
            <summary>
            Delete the entity from its <see cref="T:Friflo.Engine.ECS.EntityStore"/>.<br/>
            The deleted instance is in <see cref="F:Friflo.Engine.ECS.StoreOwnership.detached"/> state.
            Calling <see cref="T:Friflo.Engine.ECS.Entity"/> methods result in <see cref="T:System.NullReferenceException"/>'s
            </summary>
            <remarks>
            Executes in O(1) in case the entity has no children and if it is the last entity in <see cref="P:Friflo.Engine.ECS.Entity.Parent"/>.<see cref="P:Friflo.Engine.ECS.Entity.ChildIds"/>
            </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.Entity.GetChildIndex(Friflo.Engine.ECS.Entity)">
            <summary>Return the position of the given <paramref name="child"/> in the entity.</summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:Friflo.Engine.ECS.Entity.Equals(System.Object)">
            <summary> Note: Not implemented to avoid excessive boxing. </summary>
            <remarks> Use <see cref="M:Friflo.Engine.ECS.Entity.op_Equality(Friflo.Engine.ECS.Entity,Friflo.Engine.ECS.Entity)"/> or <see cref="F:Friflo.Engine.ECS.EntityUtils.EqualityComparer"/> </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.Entity.GetHashCode">
            <summary> Note: Not implemented to avoid excessive boxing. </summary>
            <remarks> Use <see cref="F:Friflo.Engine.ECS.Entity.Id"/> or <see cref="F:Friflo.Engine.ECS.EntityUtils.EqualityComparer"/> </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.Entity.Batch">
            <summary>
            Returns an <see cref="T:Friflo.Engine.ECS.EntityBatch"/> to add/remove components or tags to/from this entity using the batch.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#batch---entity">Example.</a>
            </summary>
            <remarks>
            The returned batch is used to add/removed components and tags.<br/>
            These changes are applied to the entity when calling <see cref="M:Friflo.Engine.ECS.EntityBatch.Apply"/>.<br/>
            <br/>
            Subsequent use of the batch throws <see cref="T:Friflo.Engine.ECS.BatchAlreadyAppliedException"/>.<br/>
            <br/>
            If missing the <see cref="M:Friflo.Engine.ECS.EntityBatch.Apply"/> call:<br/>
            - Entity changes are not applied.<br/>
            - Some unnecessary memory allocations.<br/>
            <br/>
            When calling <see cref="M:Friflo.Engine.ECS.EntityBatch.Apply"/> the batch executes without memory allocations.
            </remarks>
        </member>
        <member name="E:Friflo.Engine.ECS.Entity.OnTagsChanged">
            <summary>
            Add / remove an event handler for <see cref="T:Friflo.Engine.ECS.TagsChanged"/> events triggered by:<br/>
            <see cref="M:Friflo.Engine.ECS.Entity.AddTag``1"/> <br/> <see cref="M:Friflo.Engine.ECS.Entity.AddTags(Friflo.Engine.ECS.Tags@)"/> <br/> <see cref="M:Friflo.Engine.ECS.Entity.RemoveTag``1"/> <br/> <see cref="M:Friflo.Engine.ECS.Entity.RemoveTags(Friflo.Engine.ECS.Tags@)"/>.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#event">Example.</a>
            </summary>
        </member>
        <member name="E:Friflo.Engine.ECS.Entity.OnComponentChanged">
            <summary>
            Add / remove an event handler for <see cref="T:Friflo.Engine.ECS.ComponentChanged"/> events triggered by: <br/>
            <see cref="M:Friflo.Engine.ECS.Entity.AddComponent``1"/> <br/> <see cref="M:Friflo.Engine.ECS.Entity.RemoveComponent``1"/>.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#event">Example.</a>
            </summary>
        </member>
        <member name="E:Friflo.Engine.ECS.Entity.OnScriptChanged">
            <summary>
            Add / remove an event handler for <see cref="T:Friflo.Engine.ECS.ScriptChanged"/> events triggered by:<br/>
            <see cref="M:Friflo.Engine.ECS.Entity.AddScript``1(``0)"/> <br/> <see cref="M:Friflo.Engine.ECS.Entity.RemoveScript``1"/>.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#event">Example.</a>
            </summary>
        </member>
        <member name="E:Friflo.Engine.ECS.Entity.OnChildEntitiesChanged">
            <summary>
            Add / remove an event handler for <see cref="T:Friflo.Engine.ECS.ChildEntitiesChanged"/> events triggered by:<br/>
            <see cref="M:Friflo.Engine.ECS.Entity.AddChild(Friflo.Engine.ECS.Entity)"/> <br/> <see cref="M:Friflo.Engine.ECS.Entity.InsertChild(System.Int32,Friflo.Engine.ECS.Entity)"/> <br/> <see cref="M:Friflo.Engine.ECS.Entity.RemoveChild(Friflo.Engine.ECS.Entity)"/>.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#event">Example.</a>
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.Entity.AddSignalHandler``1(System.Action{Friflo.Engine.ECS.Signal{``0}})">
            <summary>
            Add the given <see cref="T:Friflo.Engine.ECS.Signal`1"/> handler to the entity.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#signal">Example.</a>
            </summary>
            <returns>The the signal handler added to the entity.<br/>
            Practical when passing a lambda that can be removed later with <see cref="M:Friflo.Engine.ECS.Entity.RemoveSignalHandler``1(System.Action{Friflo.Engine.ECS.Signal{``0}})"/>.</returns>
        </member>
        <member name="M:Friflo.Engine.ECS.Entity.RemoveSignalHandler``1(System.Action{Friflo.Engine.ECS.Signal{``0}})">
            <summary>Remove the given <see cref="T:Friflo.Engine.ECS.Signal`1"/> handler from the entity.</summary>
            <returns><c>true</c> in case the the passed signal handler was found.</returns>
        </member>
        <member name="M:Friflo.Engine.ECS.Entity.EmitSignal``1(``0@)">
            <summary>
            Emits the passed signal event to all signal handlers added with <see cref="M:Friflo.Engine.ECS.Entity.AddSignalHandler``1(System.Action{Friflo.Engine.ECS.Signal{``0}})"/>.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#signal">Example.</a>
            </summary>
            <remarks> It executes in ~10 nano seconds per signal handler. </remarks>
        </member>
        <member name="P:Friflo.Engine.ECS.Entity.DebugEventHandlers">
            <summary> Return event and signal handlers added to the entity.</summary>
            <remarks> <b>Note</b>:
            Should be used only for debugging as it allocates arrays and do multiple Dictionary lookups.<br/>
            No allocations or lookups are made in case <see cref="P:Friflo.Engine.ECS.DebugEventHandlers.TypeCount"/> is 0.
            </remarks>
        </member>
        <member name="P:Friflo.Engine.ECS.Entity.refArchetype">
            <summary>The <see cref="P:Friflo.Engine.ECS.Entity.Archetype"/> used to store the components of they the entity</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.Entity.refCompIndex">
            <summary>The index within the <see cref="P:Friflo.Engine.ECS.Entity.refArchetype"/> the entity is stored</summary>
            <remarks>The index will change if entity is moved to another <see cref="P:Friflo.Engine.ECS.Entity.Archetype"/></remarks>
        </member>
        <member name="T:Friflo.Engine.ECS.ChildEntities">
            <summary>
            Return the child entities of an <see cref="T:Friflo.Engine.ECS.Entity"/>.
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.ChildEnumerator">
            <summary>
            Use to enumerate the child entities stored in <see cref="T:Friflo.Engine.ECS.Entity"/>.<see cref="P:Friflo.Engine.ECS.Entity.ChildEntities"/>.  
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.DebugEventHandlers">
            <summary>
            Provide the event / signal handlers of an entity using <see cref="T:Friflo.Engine.ECS.Entity"/>.<see cref="P:Friflo.Engine.ECS.Entity.DebugEventHandlers"/>.
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.DebugEntityEventKind">
            <summary>
            Event type of a <see cref="T:Friflo.Engine.ECS.DebugEventHandler"/>: <see cref="F:Friflo.Engine.ECS.DebugEntityEventKind.Event"/> or <see cref="F:Friflo.Engine.ECS.DebugEntityEventKind.Signal"/>. 
            </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.DebugEntityEventKind.Event">
            <summary>
            Mark event handlers added with:<br/>
            <see cref="E:Friflo.Engine.ECS.Entity.OnComponentChanged"/> <br/> <see cref="E:Friflo.Engine.ECS.Entity.OnTagsChanged"/> <br/>
            <see cref="E:Friflo.Engine.ECS.Entity.OnScriptChanged"/> <br/> <see cref="E:Friflo.Engine.ECS.Entity.OnChildEntitiesChanged"/>.
            </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.DebugEntityEventKind.Signal">
            <summary>Mark signal handlers added with  <see cref="M:Friflo.Engine.ECS.Entity.AddSignalHandler``1(System.Action{Friflo.Engine.ECS.Signal{``0}})"/>.</summary>
        </member>
        <member name="T:Friflo.Engine.ECS.DebugEventHandler">
            <summary>
            Used as item type in <see cref="T:Friflo.Engine.ECS.DebugEventHandlers"/> providing the number of handlers for a specific event <see cref="F:Friflo.Engine.ECS.DebugEventHandler.Type"/>. 
            </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.DebugEventHandler.Type">
            <summary>The <see cref="T:System.Type"/> used for an event / signal handler.</summary>
        </member>
        <member name="F:Friflo.Engine.ECS.DebugEventHandler.Kind">
            <summary>The type of the event handlers: build-in events or custom signals.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.DebugEventHandler.Count">
            <summary>Number of event handlers for a specific event <see cref="F:Friflo.Engine.ECS.DebugEventHandler.Type"/> added to an entity.</summary>
        </member>
        <member name="F:Friflo.Engine.ECS.DebugEventHandler.handlers">
            <remarks>
            Note! must not be public.<br/>
            Otherwise the <see cref="F:Friflo.Engine.ECS.DebugEventHandler.handlers"/> can be called without the event never happened.
            </remarks>
        </member>
        <member name="T:Friflo.Engine.ECS.EntityNode">
            <summary>
            Used by the <see cref="T:Friflo.Engine.ECS.EntityStore"/> to store <see cref="T:Friflo.Engine.ECS.Entity"/> components, scripts, tags and child entities
            internally as an array of nodes.
            </summary> 
            <remarks>
            <see cref="T:Friflo.Engine.ECS.EntityNode"/>'s enable organizing entities in a tree graph structure.<br/>
            The tree graph is stored in an <see cref="T:Friflo.Engine.ECS.EntityStore"/> starting with a single <see cref="P:Friflo.Engine.ECS.EntityStore.StoreRoot"/> entity.<br/> 
            <br/>
            It provide the properties listed below
            <list type="bullet">
              <item><see cref="P:Friflo.Engine.ECS.EntityNode.Id"/> to identify an entity in its <see cref="T:Friflo.Engine.ECS.EntityStore"/></item>
              <item><see cref="P:Friflo.Engine.ECS.EntityNode.Pid"/> used to store entities in a database</item>
              <item><see cref="T:Friflo.Engine.ECS.Entity"/> to access the <see cref="T:Friflo.Engine.ECS.Entity"/> attached to a node</item>
              <item><see cref="P:Friflo.Engine.ECS.EntityNode.ParentId"/> and <see cref="P:Friflo.Engine.ECS.EntityNode.ChildIds"/> to get the direct related nodes</item>
            </list>
            <b><see cref="P:Friflo.Engine.ECS.EntityNode.Id"/></b><br/>
            The entity id change when performing an <see cref="T:Friflo.Engine.ECS.EntityStore"/> id cleanup.<br/>
            The clean remove unused ids and ensure that entities with the same <see cref="P:Friflo.Engine.ECS.EntityNode.Archetype"/> have consecutive ids.<br/>
            <br/>
            <b><see cref="P:Friflo.Engine.ECS.EntityNode.Pid"/></b><br/>
            When creating a new entity in the <see cref="T:Friflo.Engine.ECS.EntityStore"/> it generates a random <see cref="P:Friflo.Engine.ECS.EntityNode.Pid"/>
            using <see cref="M:Friflo.Engine.ECS.EntityStore.GenerateRandomPidForId(System.Int32)"/>.<br/>
            Using random pids avoid merge conflicts when multiples users make changes to the same <see cref="T:Friflo.Engine.ECS.EntityStore"/> file / database.<br/>
            The probability generating the same pid by two different users is:
            <code>
                p = 1 - exp(-r^2 / (2 * N))
                r:  number of new entities added by a user to an existing <see cref="T:Friflo.Engine.ECS.EntityStore"/> (not the number of all entities)
                N:  number of possible values = int.MaxValue = 2147483647
            </code>
            See: https://en.wikipedia.org/wiki/Birthday_problem
            </remarks>
        </member>
        <member name="P:Friflo.Engine.ECS.EntityNode.Id">
            <summary>The unique entity id.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.EntityNode.Pid">
            <summary>Permanent unique pid used for persistence of an entity in a database </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.EntityNode.Archetype">
            <summary>The <see cref="T:Friflo.Engine.ECS.Archetype"/> the entity node is stored.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.EntityNode.ChildIds">
            <summary>The child entities of an entity as an array of ids.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.EntityNode.ChildCount">
            <summary>Number of child entities.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.EntityNode.ParentId">
            <summary>The parent id of the entity. 0 - if the entity has no parent.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.EntityNode.Flags">
            <summary>Internally used flags assigned to the entity.</summary>
        </member>
        <member name="F:Friflo.Engine.ECS.EntityNode.flags">
            <summary> Use <see cref="M:Friflo.Engine.ECS.EntityNode.Is(Friflo.Engine.ECS.NodeFlags)"/> or <see cref="M:Friflo.Engine.ECS.EntityNode.IsNot(Friflo.Engine.ECS.NodeFlags)"/> for read access. </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.EntityNode.archetype">
            <remarks> Is set to null only in <see cref="M:Friflo.Engine.ECS.EntityStore.DeleteNode(System.Int32)"/>. </remarks>
        </member>
        <member name="F:Friflo.Engine.ECS.EntityNode.signalTypeCount">
            <remarks> Used to avoid enumeration of <see cref="F:Friflo.Engine.ECS.EntityStore.Intern.signalHandlers"/> </remarks>
        </member>
        <member name="T:Friflo.Engine.ECS.HasEventFlags">
            <summary>
            Use to avoid Dictionary lookups for:
            <see cref="F:Friflo.Engine.ECS.EntityStoreBase.InternBase.entityComponentChanged"/><br/>
            <see cref="F:Friflo.Engine.ECS.EntityStoreBase.InternBase.entityTagsChanged"/><br/>
            <see cref="F:Friflo.Engine.ECS.EntityStore.Intern.entityScriptChanged"/><br/>
            <see cref="F:Friflo.Engine.ECS.EntityStore.Intern.entityChildEntitiesChanged"/><br/>
            </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.HasEventFlags.ComponentChanged">
            <summary> Bit is set - <see cref="F:Friflo.Engine.ECS.EntityStoreBase.InternBase.entityComponentChanged"/>.Count > 0<br/> </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.HasEventFlags.TagsChanged">
            <summary> Bit is set - <see cref="F:Friflo.Engine.ECS.EntityStoreBase.InternBase.entityTagsChanged"/>.Count > 0<br/> </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.HasEventFlags.ScriptChanged">
            <summary> Bit is set - <see cref="F:Friflo.Engine.ECS.EntityStore.Intern.entityScriptChanged"/>.Count > 0<br/> </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.HasEventFlags.ChildEntitiesChanged">
            <summary> Bit is set - <see cref="F:Friflo.Engine.ECS.EntityStore.Intern.entityChildEntitiesChanged"/>.Count > 0<br/> </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.EntityScripts">
            <summary>
            Return the <see cref="T:Friflo.Engine.ECS.Script"/>'s added to an <see cref="T:Friflo.Engine.ECS.Entity"/>.
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.EntityScripts.Count">
            <summary>Return the number of <see cref="T:Friflo.Engine.ECS.Script"/>'s of an entity.</summary>
        </member>
        <member name="F:Friflo.Engine.ECS.EntityScripts.scripts">
            <summary>
            Invariant:<br/>
            <see cref="F:Friflo.Engine.ECS.EntityScripts.id"/> == 0   :   <see cref="F:Friflo.Engine.ECS.EntityScripts.scripts"/> == null<br/>
            <see cref="F:Friflo.Engine.ECS.EntityScripts.id"/>  > 0   :   <see cref="F:Friflo.Engine.ECS.EntityScripts.scripts"/> != null  <b>and</b> its Length > 0 
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.EntityScriptsEnumerator">
            <summary>
            Used to enumerate the <see cref="T:Friflo.Engine.ECS.Script"/>'s added to an <see cref="T:Friflo.Engine.ECS.Entity"/>.
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.EntityInfo">
            <summary>
            Used to provide additional debug information for an <see cref="T:Friflo.Engine.ECS.Entity"/>:<br/>
            <see cref="P:Friflo.Engine.ECS.Entity.Pid"/>                <br/>
            <see cref="P:Friflo.Engine.ECS.Entity.Enabled"/>            <br/>
            <see cref="P:Friflo.Engine.ECS.Entity.DebugJSON"/>          <br/>
            <see cref="P:Friflo.Engine.ECS.Entity.DebugEventHandlers"/> <br/>
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.EntityEqualityComparer">
            <summary>
            Used to check if two <see cref="T:Friflo.Engine.ECS.Entity"/> instances are the same entity by comparing their <see cref="F:Friflo.Engine.ECS.Entity.Id"/>'s. 
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityUtils.GetEntityComponent(Friflo.Engine.ECS.Entity,Friflo.Engine.ECS.ComponentType)">
            <summary>
            Returns a copy of the entity component as an object.<br/>
            The returned <see cref="T:Friflo.Engine.ECS.IComponent"/> is a boxed struct.<br/>
            So avoid using this method whenever possible. Use <see cref="M:Friflo.Engine.ECS.Entity.GetComponent``1"/> instead.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EntityUtils.JsonToEntity(Friflo.Engine.ECS.Entity,System.String)">
            <remarks> The "id" in the passed JSON <paramref name="value"/> is ignored. </remarks>
        </member>
        <member name="T:Friflo.Engine.ECS.Scripts">
            <summary>
            Contains the <see cref="T:Friflo.Engine.ECS.Script"/>'s added to an entity.
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.Scripts.Length">
            <summary> return number ob <see cref="T:Friflo.Engine.ECS.Script"/>'s. </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.Scripts.Span">
            <summary> return the <see cref="T:Friflo.Engine.ECS.Script"/>'s as a Span. </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.ScriptsEnumerator">
            <summary>
            Enumerator for entity <see cref="T:Friflo.Engine.ECS.Scripts"/>.
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.Entities">
            <summary>
            Reserved symbol name.
            If exposing public it need to store an array of <see cref="T:Friflo.Engine.ECS.Entity"/>'s.<br/>
            Similar to <see cref="T:Friflo.Engine.ECS.Archetypes"/>.
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.ChildEntitiesChangedAction">
            <summary>
            The modification type of an <see cref="T:Friflo.Engine.ECS.ChildEntitiesChanged"/> event: <see cref="F:Friflo.Engine.ECS.ChildEntitiesChangedAction.Add"/> or <see cref="F:Friflo.Engine.ECS.ChildEntitiesChangedAction.Remove"/> entity.
            </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.ChildEntitiesChangedAction.Add">
            <summary> An entity was added as a child to another <see cref="T:Friflo.Engine.ECS.Entity"/>. </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.ChildEntitiesChangedAction.Remove">
            <summary> A child entity was removed from an <see cref="T:Friflo.Engine.ECS.Entity"/>. </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.NodeFlags">
            <summary>
            Flags assigned to <see cref="T:Friflo.Engine.ECS.EntityNode"/>'s internally stored in an <see cref="T:Friflo.Engine.ECS.EntityStore"/>.
            </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.NodeFlags.TreeNode">
            <summary> If set a node is a <see cref="F:Friflo.Engine.ECS.TreeMembership.treeNode"/>. Otherwise <see cref="F:Friflo.Engine.ECS.TreeMembership.floating"/> </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.PidType">
            <summary>
            Specify the way how an <see cref="T:Friflo.Engine.ECS.EntityStore"/> generates entity <see cref="P:Friflo.Engine.ECS.Entity.Pid"/>'s.
            </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.PidType.UsePidAsId">
            <summary>
            Used to simplify testing as the pid and id of an entity are equal.<br/>
            It also increases performance in case ids are consecutively.<br/>
            This method is <b>not</b> intended to be used to store entities of an <see cref="T:Friflo.Engine.ECS.EntityStore"/>
            in JSON files or in a database.<br/>
            </summary>
            <remarks>
            Disadvantages:<br/>
            - Big gaps between ids are wasted memory.<br/>
            - When add entities in a database id clashes with entities added by other users are very likely.<br/>
            - High probability of merge conflicts caused by id clashes by adding the same entity ids by multiple users. 
            </remarks>
        </member>
        <member name="F:Friflo.Engine.ECS.PidType.RandomPids">
            <summary>
            Map random <see cref="P:Friflo.Engine.ECS.Entity.Pid"/>'s to <see cref="F:Friflo.Engine.ECS.Entity.Id"/>'s used within the engine at runtime.<br/>
            This method is intended to be used to store entities of an <see cref="T:Friflo.Engine.ECS.EntityStore"/> in JSON files or in a database. 
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.SchemaTypeKind">
            <summary>
            Declares the <see cref="F:Friflo.Engine.ECS.SchemaType.Kind"/> of a <see cref="T:Friflo.Engine.ECS.SchemaType"/> 
            </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.SchemaTypeKind.Component">
            <summary> Declare a <see cref="T:Friflo.Engine.ECS.ComponentType"/> is an <see cref="T:Friflo.Engine.ECS.IComponent"/>. </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.SchemaTypeKind.Script">
            <summary> Declare a <see cref="T:Friflo.Engine.ECS.ScriptType"/> is a <see cref="F:Friflo.Engine.ECS.SchemaTypeKind.Script"/>. </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.SchemaTypeKind.Tag">
            <summary> Declare a <see cref="T:Friflo.Engine.ECS.TagType"/> is an <see cref="T:Friflo.Engine.ECS.ITag"/>. </summary>
            <remarks> A <b>Tag</b> is defined by struct definition without fields / properties extending <see cref="T:Friflo.Engine.ECS.ITag"/>. </remarks>
        </member>
        <member name="T:Friflo.Engine.ECS.StoreOwnership">
            <summary>Describe the ownership state of an <see cref="T:Friflo.Engine.ECS.Entity"/></summary>
        </member>
        <member name="F:Friflo.Engine.ECS.StoreOwnership.detached">
            <summary> The entity is not owned by an <see cref="T:Friflo.Engine.ECS.EntityStore"/>. </summary>
            <remarks>
            When calling <see cref="M:Friflo.Engine.ECS.Entity.DeleteEntity"/> its state changes to <see cref="F:Friflo.Engine.ECS.StoreOwnership.detached"/>.<br/>
            </remarks>
        </member>
        <member name="F:Friflo.Engine.ECS.StoreOwnership.attached">
            <summary> The entity is owned by an <see cref="T:Friflo.Engine.ECS.EntityStore"/>. </summary>
            <remarks>
            Entities created with <see cref="M:Friflo.Engine.ECS.EntityStore.CreateEntity"/> are automatically <see cref="F:Friflo.Engine.ECS.StoreOwnership.attached"/> to its <see cref="T:Friflo.Engine.ECS.EntityStore"/><br/>
            </remarks>
        </member>
        <member name="T:Friflo.Engine.ECS.TreeMembership">
            <summary>
            Describe the membership of an <see cref="T:Friflo.Engine.ECS.Entity"/> to the <see cref="T:Friflo.Engine.ECS.EntityStore"/> tree graph.
            </summary>
            <remarks>Requirement: The entity must be <see cref="F:Friflo.Engine.ECS.StoreOwnership.attached"/> to an <see cref="T:Friflo.Engine.ECS.EntityStore"/></remarks>
        </member>
        <member name="F:Friflo.Engine.ECS.TreeMembership.floating">
            <summary> The entity is not member of the <see cref="T:Friflo.Engine.ECS.EntityStore"/> tree graph. </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.TreeMembership.treeNode">
            <summary> The entity is member of the <see cref="T:Friflo.Engine.ECS.EntityStore"/> tree graph. </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.EntityEventAction">
            <summary>
            The type of an entity change in <see cref="T:Friflo.Engine.ECS.EntityEvent"/>. 
            </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.EntityEventAction.Removed">
            <summary> A component / tag was removed </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.EntityEventAction.Added">
            <summary> A component / tag was added </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.EntityEvent">
            <summary>
            The information about a structural change recorded by the <see cref="T:Friflo.Engine.ECS.EventRecorder"/>.
            </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.EntityEvent.Id">
            <summary>The id of the changed entity.</summary>
        </member>
        <member name="F:Friflo.Engine.ECS.EntityEvent.Action">
            <summary>The change type - add / remove - of a component / tag. </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.EntityEvent.TypeIndex">
            <summary> The index in <see cref="T:Friflo.Engine.ECS.EntitySchema"/> properties <see cref="P:Friflo.Engine.ECS.EntitySchema.Components"/> or <see cref="P:Friflo.Engine.ECS.EntitySchema.Tags"/>. </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.EntityEvent.Kind">
            <summary> The kind - component / tag - of the structural change. </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.EventFilter">
            <summary>
            Used to filter structural changes made to an entity like added / removed components / tags using <see cref="M:Friflo.Engine.ECS.EventFilter.HasEvent(System.Int32)"/>.<br/>
            The <see cref="P:Friflo.Engine.ECS.EntityStore.EventRecorder"/> must be enabled to get add / remove events.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#eventfilter">Example.</a>
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EventFilter.#ctor(Friflo.Engine.ECS.EventRecorder)">
            <summary>
            Create and event filter for the passed <see cref="T:Friflo.Engine.ECS.EventRecorder"/>. 
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EventFilter.ComponentAdded``1">
            <summary> Enable filtering add component events of the given <see cref="T:Friflo.Engine.ECS.IComponent"/> type <typeparamref name="T"/>.</summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EventFilter.ComponentRemoved``1">
            <summary> Enable filtering remove component events of the given <see cref="T:Friflo.Engine.ECS.IComponent"/> type <typeparamref name="T"/>.</summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EventFilter.TagAdded``1">
            <summary> Enable filtering add tag events of the given <see cref="T:Friflo.Engine.ECS.ITag"/> type <typeparamref name="T"/>.</summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EventFilter.TagRemoved``1">
            <summary> Enable filtering remove tag events of the given <see cref="T:Friflo.Engine.ECS.ITag"/> type <typeparamref name="T"/>.</summary>
        </member>
        <member name="M:Friflo.Engine.ECS.EventFilter.UpdateFilter">
            <remarks>
            The <see cref="F:Friflo.Engine.ECS.EventFilter.componentEvents"/> lock ensures that the <see cref="F:Friflo.Engine.ECS.EntityEvents.entityChanges"/> Dictionary
            is updated from a single thread only.<br/>
            See remarks as <see cref="M:Friflo.Engine.ECS.EventFilter.HasEvent(System.Int32)"/>
            </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.EventFilter.HasEvent(System.Int32)">
            <summary>
            Returns true if a component or tag was added / removed to / from the entity with the passed <paramref name="entityId"/>.
            </summary>
            <remarks>
            Therefore <see cref="P:Friflo.Engine.ECS.EntityStore.EventRecorder"/> needs to be enabled and<br/> 
            the component / tag (add / remove) events of interest need to be added to the <see cref="T:Friflo.Engine.ECS.EventFilter"/>.<br/>
            <br/>
            <b>Note</b>: <see cref="M:Friflo.Engine.ECS.EventFilter.HasEvent(System.Int32)"/> can be called from any thread.<br/>
            No structural changes like adding / removing components/tags must not be executed at the same time by another thread.
            </remarks>
        </member>
        <member name="T:Friflo.Engine.ECS.EventRecorder">
            <summary>
            Used to record events of structural changes like add/remove component/tag.<br/>
            The recorder is required to filter these events using an <see cref="T:Friflo.Engine.ECS.EventFilter"/>.
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.EventRecorder.AllEventsCount">
            <summary> Return the number of all recorded events.<br/> Calling <see cref="M:Friflo.Engine.ECS.EventRecorder.ClearEvents"/> does not affect the counter.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.EventRecorder.Enabled">
            <summary> Record component / tag events if true.<br/> It is required when using an <see cref="T:Friflo.Engine.ECS.EventFilter"/>.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.EventRecorder.ComponentEvents">
            <summary>The list of all recorded component events.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.EventRecorder.TagEvents">
            <summary>The list of all recorded tag events.</summary>
        </member>
        <member name="F:Friflo.Engine.ECS.EventRecorder.allEventsCountMapUpdate">
            <remarks>
            If <see cref="F:Friflo.Engine.ECS.EventRecorder.allEventsCount"/> != <see cref="F:Friflo.Engine.ECS.EventRecorder.allEventsCountMapUpdate"/>
            the <see cref="F:Friflo.Engine.ECS.EntityEvents.entityChanges"/> must be updated when using an <see cref="T:Friflo.Engine.ECS.EventFilter"/>.
            </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.EventRecorder.ClearEvents">
            <summary>
            Clear all  <see cref="P:Friflo.Engine.ECS.EventRecorder.ComponentEvents"/> and <see cref="P:Friflo.Engine.ECS.EventRecorder.TagEvents"/>.
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.ChildEntitiesChanged">
            <summary>
            Is the event for event handlers added to <see cref="E:Friflo.Engine.ECS.Entity.OnChildEntitiesChanged"/> or <see cref="E:Friflo.Engine.ECS.EntityStore.OnChildEntitiesChanged"/>.
            </summary>
            <remarks>
            These events are fired on:
            <list type="bullet">
                <item><see cref="M:Friflo.Engine.ECS.Entity.AddChild(Friflo.Engine.ECS.Entity)"/></item>
                <item><see cref="M:Friflo.Engine.ECS.Entity.InsertChild(System.Int32,Friflo.Engine.ECS.Entity)"/></item>
                <item><see cref="M:Friflo.Engine.ECS.Entity.RemoveChild(Friflo.Engine.ECS.Entity)"/></item>
            </list>
            </remarks>
        </member>
        <member name="F:Friflo.Engine.ECS.ChildEntitiesChanged.Store">
            <summary>The <see cref="T:Friflo.Engine.ECS.EntityStore"/> containing the <see cref="P:Friflo.Engine.ECS.ChildEntitiesChanged.Entity"/> that emitted the event.</summary>
        </member>
        <member name="F:Friflo.Engine.ECS.ChildEntitiesChanged.EntityId">
            <summary>The <c>Id</c> of the <see cref="P:Friflo.Engine.ECS.ChildEntitiesChanged.Entity"/> that emitted the event.</summary>
        </member>
        <member name="F:Friflo.Engine.ECS.ChildEntitiesChanged.ChildId">
            <summary>The <c>Id</c> of the added / removed child entity</summary>
        </member>
        <member name="F:Friflo.Engine.ECS.ChildEntitiesChanged.ChildIndex">
            <summary>The child position of the added / removed child entity in the parent <see cref="P:Friflo.Engine.ECS.ChildEntitiesChanged.Entity"/>.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.ChildEntitiesChanged.Entity">
            <summary>The <see cref="P:Friflo.Engine.ECS.ChildEntitiesChanged.Entity"/> that emitted the event - aka the publisher</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.ChildEntitiesChanged.Child">
            <summary>The added / removed child entity</summary>
        </member>
        <member name="T:Friflo.Engine.ECS.ComponentChangedAction">
            <summary>
            The modification type of a <see cref="T:Friflo.Engine.ECS.ComponentChanged"/> event: <see cref="F:Friflo.Engine.ECS.ComponentChangedAction.Remove"/>, <see cref="F:Friflo.Engine.ECS.ComponentChangedAction.Add"/> or <see cref="F:Friflo.Engine.ECS.ComponentChangedAction.Update"/> component.
            </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.ComponentChangedAction.Remove">
            <summary> An <see cref="T:Friflo.Engine.ECS.IComponent"/> is removed from an <see cref="T:Friflo.Engine.ECS.Entity"/>. </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.ComponentChangedAction.Add">
            <summary> An <see cref="T:Friflo.Engine.ECS.IComponent"/> is added to an <see cref="T:Friflo.Engine.ECS.Entity"/>. </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.ComponentChangedAction.Update">
            <summary> An <see cref="T:Friflo.Engine.ECS.IComponent"/> of an <see cref="T:Friflo.Engine.ECS.Entity"/> is updated when calling
            <see cref="M:Friflo.Engine.ECS.Entity.AddComponent``1"/> on an entity already having a component of a specific type. </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.ComponentChanged">
            <summary>
            Is the event for event handlers added to <see cref="E:Friflo.Engine.ECS.Entity.OnComponentChanged"/>,
            <see cref="E:Friflo.Engine.ECS.EntityStoreBase.OnComponentAdded"/> or <see cref="E:Friflo.Engine.ECS.EntityStoreBase.OnComponentRemoved"/>.
            </summary>
            <remarks>
            These events are fired on:
            <list type="bullet">
                <item><see cref="M:Friflo.Engine.ECS.Entity.AddComponent``1"/></item>
                <item><see cref="M:Friflo.Engine.ECS.Entity.RemoveComponent``1"/></item>
            </list>
            </remarks>
        </member>
        <member name="F:Friflo.Engine.ECS.ComponentChanged.Store">
            <summary>The <see cref="T:Friflo.Engine.ECS.EntityStore"/> containing the <see cref="P:Friflo.Engine.ECS.ComponentChanged.Entity"/> that emitted the event.</summary>
        </member>
        <member name="F:Friflo.Engine.ECS.ComponentChanged.EntityId">
            <summary>The <c>Id</c> of the <see cref="P:Friflo.Engine.ECS.ComponentChanged.Entity"/> that emitted the event.</summary>
        </member>
        <member name="F:Friflo.Engine.ECS.ComponentChanged.Action">
            <summary>The executed entity change: <see cref="F:Friflo.Engine.ECS.ComponentChangedAction.Remove"/>,
            <see cref="F:Friflo.Engine.ECS.ComponentChangedAction.Add"/> or <see cref="F:Friflo.Engine.ECS.ComponentChangedAction.Remove"/> component.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.ComponentChanged.Entity">
            <summary>The <see cref="P:Friflo.Engine.ECS.ComponentChanged.Entity"/> that emitted the event - aka the publisher.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.ComponentChanged.ComponentType">
            <summary>The <see cref="T:Friflo.Engine.ECS.ComponentType"/> of the added / removed component.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.ComponentChanged.Type">
            <summary>The <see cref="T:System.Type"/> of the added / removed component.</summary>
            <remarks>
            Use the following code snippet to switch on <see cref="P:Friflo.Engine.ECS.ComponentChanged.Type"/>:
            <br/>
            <code>
                var type = args.Type;
                switch (true) {
                    case true when type == typeof(EntityName):
                        break;
                    case true when type == typeof(Position):
                        break;
                }
            </code> 
            </remarks>
        </member>
        <member name="P:Friflo.Engine.ECS.ComponentChanged.DebugComponent">
            <summary> Return the current <see cref="T:Friflo.Engine.ECS.IComponent"/> for debugging.<br/>
            <b>Note</b>: It degrades performance as it boxes the returned component. </summary>
            <remarks> To access the current component use <see cref="M:Friflo.Engine.ECS.ComponentChanged.Component``1"/> </remarks>
        </member>
        <member name="P:Friflo.Engine.ECS.ComponentChanged.DebugOldComponent">
            <summary> Return the old <see cref="T:Friflo.Engine.ECS.IComponent"/> for debugging.<br/>
            <b>Note</b>: It degrades performance as it boxes the returned component. </summary>
            <remarks> To access the old component use <see cref="M:Friflo.Engine.ECS.ComponentChanged.OldComponent``1"/> </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.ComponentChanged.Component``1">
            <summary>
            Returns the current component value after executing the <see cref="F:Friflo.Engine.ECS.ComponentChangedAction.Add"/>
            or <see cref="F:Friflo.Engine.ECS.ComponentChangedAction.Update"/> component.<br/>
            </summary>.
            <typeparam name="T"> The component type of the changed component.</typeparam>
            <exception cref="T:System.InvalidOperationException"> In case the <see cref="F:Friflo.Engine.ECS.ComponentChanged.Action"/> was <see cref="F:Friflo.Engine.ECS.ComponentChangedAction.Remove"/> component. </exception>
            <exception cref="T:System.ArgumentException"> In case the component is accessed with the wrong generic type. </exception>
        </member>
        <member name="M:Friflo.Engine.ECS.ComponentChanged.OldComponent``1">
            <summary>
            Returns the old component value before executing <see cref="F:Friflo.Engine.ECS.ComponentChangedAction.Update"/>
            or <see cref="F:Friflo.Engine.ECS.ComponentChangedAction.Remove"/> component.<br/> <b>Note</b>: See Remarks for restrictions.
            </summary>.
            <remarks>
            <b>Note</b>:
            The <see cref="M:Friflo.Engine.ECS.ComponentChanged.OldComponent``1"/> return value is only valid within the event handler call.<br/>
            <see cref="T:Friflo.Engine.ECS.ComponentChanged"/> may return an invalid value when calling it outside the event handler scope.<br/>
            Instead store the value returned by <see cref="M:Friflo.Engine.ECS.ComponentChanged.OldComponent``1"/> within the handler when using it after the event handler returns.<br/>
            Reason: For performance there is only one field per component type storing the old component value.<br/> 
            </remarks>
            <typeparam name="T"> The component type of the changed component.</typeparam>
            <exception cref="T:System.InvalidOperationException"> In case the <see cref="F:Friflo.Engine.ECS.ComponentChanged.Action"/> was <see cref="F:Friflo.Engine.ECS.ComponentChangedAction.Add"/> component. </exception>
            <exception cref="T:System.ArgumentException"> In case the component is accessed with the wrong generic type. </exception>
        </member>
        <member name="P:Friflo.Engine.ECS.EntitiesChanged.EntityIds">
            <remarks>
            Use <see cref="M:Friflo.Engine.ECS.EntityStore.GetEntityById(System.Int32)"/> to get the <see cref="T:Friflo.Engine.ECS.Entity"/>. E.g.<br/>
            <code>      var entity = store.GetEntityById(args.EntityIds[]);       </code>
            </remarks>
        </member>
        <member name="T:Friflo.Engine.ECS.ScriptChangedAction">
            <summary>
            The modification type of a <see cref="T:Friflo.Engine.ECS.ScriptChanged"/> event: <see cref="F:Friflo.Engine.ECS.ScriptChangedAction.Remove"/>, <see cref="F:Friflo.Engine.ECS.ScriptChangedAction.Add"/> or <see cref="F:Friflo.Engine.ECS.ScriptChangedAction.Replace"/> script.
            </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.ScriptChangedAction.Remove">
            <summary> A <see cref="T:Friflo.Engine.ECS.Script"/> was removed from an <see cref="T:Friflo.Engine.ECS.Entity"/>. </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.ScriptChangedAction.Add">
            <summary> A <see cref="T:Friflo.Engine.ECS.Script"/> was added to an <see cref="T:Friflo.Engine.ECS.Entity"/>. </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.ScriptChangedAction.Replace">
            <summary> An entity <see cref="T:Friflo.Engine.ECS.Script"/> was replaced by another script. </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.ScriptChanged">
            <summary>
            Is the event for event handlers added to <see cref="E:Friflo.Engine.ECS.Entity.OnScriptChanged"/>,
            <see cref="E:Friflo.Engine.ECS.EntityStore.OnScriptAdded"/> or <see cref="E:Friflo.Engine.ECS.EntityStore.OnScriptRemoved"/>.
            </summary>
            <remarks>
            <br/>
            These events are fired on:
            <list type="bullet">
                <item><see cref="M:Friflo.Engine.ECS.Entity.AddScript``1(``0)"/></item>
                <item><see cref="M:Friflo.Engine.ECS.Entity.RemoveScript``1"/></item>
            </list>
            </remarks>
        </member>
        <member name="F:Friflo.Engine.ECS.ScriptChanged.Entity">
            <summary>The <see cref="F:Friflo.Engine.ECS.ScriptChanged.Entity"/> that emitted the event - aka the publisher / subject.</summary>
        </member>
        <member name="F:Friflo.Engine.ECS.ScriptChanged.Action">
            <summary>The executed entity change: <see cref="F:Friflo.Engine.ECS.ScriptChangedAction.Remove"/>,
            <see cref="F:Friflo.Engine.ECS.ScriptChangedAction.Add"/> or <see cref="F:Friflo.Engine.ECS.ScriptChangedAction.Replace"/> script.</summary>
        </member>
        <member name="F:Friflo.Engine.ECS.ScriptChanged.Script">
            <summary>
            The new <see cref="T:Friflo.Engine.ECS.Script"/> after executing <see cref="F:Friflo.Engine.ECS.ScriptChangedAction.Add"/> or <see cref="F:Friflo.Engine.ECS.ScriptChangedAction.Replace"/>.<br/>
            Is null in case of <see cref="F:Friflo.Engine.ECS.ScriptChangedAction.Remove"/>.
            </summary>
            <remarks>
            Use the following code snippet to switch on <see cref="F:Friflo.Engine.ECS.ScriptChanged.Script"/> type:
            <br/>
            <code>
                switch (args.Script) {
                    case TestScript1 script1:
                        break;
                    case TestScript2 script2:
                        break;
                }
            </code>
            </remarks>
        </member>
        <member name="F:Friflo.Engine.ECS.ScriptChanged.OldScript">
            <summary>
            The <see cref="T:Friflo.Engine.ECS.Script"/> before executing <see cref="F:Friflo.Engine.ECS.ScriptChangedAction.Remove"/> or <see cref="F:Friflo.Engine.ECS.ScriptChangedAction.Replace"/>.<br/>
            Is null in case of <see cref="F:Friflo.Engine.ECS.ScriptChangedAction.Add"/>.
            </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.ScriptChanged.ScriptType">
            <summary>The <see cref="T:Friflo.Engine.ECS.ScriptType"/> of the remove, added or replaced script.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.ScriptChanged.Store">
            <summary>The <see cref="T:Friflo.Engine.ECS.EntityStore"/> containing the <see cref="F:Friflo.Engine.ECS.ScriptChanged.Entity"/> that emitted the event.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.ScriptChanged.Type">
            <remarks>Intentionally not exposed to direct using <see cref="F:Friflo.Engine.ECS.ScriptChanged.Script"/> instead.</remarks>
        </member>
        <member name="T:Friflo.Engine.ECS.Signal`1">
            <summary>
            <see cref="T:Friflo.Engine.ECS.Signal`1"/>'s are used to emit custom events from an entity to custom <see cref="T:Friflo.Engine.ECS.Signal`1"/> handlers.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#signal">Example.</a>
            </summary>
            <remarks>
            <see cref="T:Friflo.Engine.ECS.Signal`1"/> handlers are added with <see cref="M:Friflo.Engine.ECS.Entity.AddSignalHandler``1(System.Action{Friflo.Engine.ECS.Signal{``0}})"/>.<br/>
            They are used to implement the <a href="https://en.wikipedia.org/wiki/Observer_pattern">Observer pattern</a>
            on entity level in the engine.<br/>
            <br/>
            It enables decoupling the code used for emitting events from a specific entity (aka subject / publisher)<br/>
            to multiple subscribers (aka observers) consuming the event by their <see cref="T:Friflo.Engine.ECS.Signal`1"/> handlers. 
            </remarks>
            <typeparam name="TEvent">The event type containing the fields of a custom event.</typeparam>
        </member>
        <member name="F:Friflo.Engine.ECS.Signal`1.Store">
            <summary>The <see cref="T:Friflo.Engine.ECS.EntityStore"/> containing the <see cref="P:Friflo.Engine.ECS.Signal`1.Entity"/> that emitted the <see cref="F:Friflo.Engine.ECS.Signal`1.Event"/>.</summary>
        </member>
        <member name="F:Friflo.Engine.ECS.Signal`1.EntityId">
            <summary>The id of the <see cref="P:Friflo.Engine.ECS.Signal`1.Entity"/> that emitted the <see cref="F:Friflo.Engine.ECS.Signal`1.Event"/> with <see cref="M:Friflo.Engine.ECS.Entity.EmitSignal``1(``0@)"/>.</summary>
        </member>
        <member name="F:Friflo.Engine.ECS.Signal`1.Event">
            <summary>The <see cref="F:Friflo.Engine.ECS.Signal`1.Event"/> containing event specific data passed to <see cref="M:Friflo.Engine.ECS.Entity.EmitSignal``1(``0@)"/>.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.Signal`1.Entity">
            <summary>The <see cref="P:Friflo.Engine.ECS.Signal`1.Entity"/> that emitted the <see cref="F:Friflo.Engine.ECS.Signal`1.Event"/> with <see cref="M:Friflo.Engine.ECS.Entity.EmitSignal``1(``0@)"/> - aka the publisher.</summary>
        </member>
        <member name="T:Friflo.Engine.ECS.TagsChanged">
            <summary>
            Is the event for event handlers added to <see cref="E:Friflo.Engine.ECS.Entity.OnTagsChanged"/> or <see cref="E:Friflo.Engine.ECS.EntityStoreBase.OnTagsChanged"/>.
            </summary>
            <remarks>
            These events are fired on:
            <list type="bullet">
                <item><see cref="M:Friflo.Engine.ECS.Entity.AddTag``1"/></item>
                <item><see cref="M:Friflo.Engine.ECS.Entity.AddTags(Friflo.Engine.ECS.Tags@)"/></item>
                <item><see cref="M:Friflo.Engine.ECS.Entity.RemoveTag``1"/></item>
                <item><see cref="M:Friflo.Engine.ECS.Entity.RemoveTags(Friflo.Engine.ECS.Tags@)"/></item>
            </list>
            </remarks>
        </member>
        <member name="F:Friflo.Engine.ECS.TagsChanged.Store">
            <summary>The <see cref="T:Friflo.Engine.ECS.EntityStore"/> containing the <see cref="P:Friflo.Engine.ECS.TagsChanged.Entity"/> that emitted the event.</summary>
        </member>
        <member name="F:Friflo.Engine.ECS.TagsChanged.EntityId">
            <summary>The <c>Id</c> of the <see cref="P:Friflo.Engine.ECS.TagsChanged.Entity"/> that emitted the event.</summary>
        </member>
        <member name="F:Friflo.Engine.ECS.TagsChanged.Tags">
            <summary>The new state of the <see cref="P:Friflo.Engine.ECS.TagsChanged.Entity"/> <see cref="P:Friflo.Engine.ECS.Entity.Tags"/>.</summary>
        </member>
        <member name="F:Friflo.Engine.ECS.TagsChanged.OldTags">
            <summary>The old state of the <see cref="P:Friflo.Engine.ECS.TagsChanged.Entity"/> <see cref="P:Friflo.Engine.ECS.Entity.Tags"/> before the change.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.TagsChanged.Entity">
            <summary>The <see cref="P:Friflo.Engine.ECS.TagsChanged.Entity"/> that emitted the event - aka the publisher.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.TagsChanged.AddedTags">
            <summary>The <see cref="T:Friflo.Engine.ECS.Tags"/> added to the <see cref="P:Friflo.Engine.ECS.TagsChanged.Entity"/>.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.TagsChanged.RemovedTags">
            <summary>The <see cref="T:Friflo.Engine.ECS.Tags"/> removed from the <see cref="P:Friflo.Engine.ECS.TagsChanged.Entity"/>.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.TagsChanged.ChangedTags">
            <summary>The changed (removed / added) entity <see cref="T:Friflo.Engine.ECS.Tags"/>.</summary>
        </member>
        <member name="T:Friflo.Engine.ECS.IComponent">
            <summary>
            To enable adding a struct component to an <see cref="T:Friflo.Engine.ECS.Entity"/> it need to implement <see cref="T:Friflo.Engine.ECS.IComponent"/>.<br/>
            <see cref="T:Friflo.Engine.ECS.IComponent"/> types are <b>struct</b>s which only contains data <b>but no</b> script / methods.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#component">Example.</a>
            </summary>
            <remarks>
            An <see cref="T:Friflo.Engine.ECS.Entity"/> can contain multiple components but only one of each type.<br/>
            <br/>
            Optionally attribute the implementing struct with <see cref="T:Friflo.Engine.ECS.ComponentKeyAttribute"/><br/>
            to assign a custom component key name used for JSON serialization.<br/>
            <br/>
            Common game specific <see cref="T:Friflo.Engine.ECS.IComponent"/> types defined by the Engine:
            <list type="bullet">
                <item><see cref="T:Friflo.Engine.ECS.EntityName"/></item>
                <item><see cref="T:Friflo.Engine.ECS.UniqueEntity"/></item>
                <item><see cref="T:Friflo.Engine.ECS.Position"/></item>
                <item><see cref="T:Friflo.Engine.ECS.Rotation"/></item>
                <item><see cref="T:Friflo.Engine.ECS.Scale3"/></item>
                <item><see cref="T:Friflo.Engine.ECS.Transform"/></item>
            </list>
            </remarks>
        </member>
        <member name="T:Friflo.Engine.ECS.ITag">
            <summary>
            Used to create entity <b>Tag</b>'s by declaring a struct without fields or properties extending <see cref="T:Friflo.Engine.ECS.ITag"/>.<br/>
            <b>Note:</b> An <see cref="T:Friflo.Engine.ECS.ITag"/> should be used to tag a group of multiple entities.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#tag">Example.</a>
            </summary>
            <remarks>
            In case you want to find a unique entity add the component <see cref="T:Friflo.Engine.ECS.UniqueEntity"/> to an entity<br/>
            and use <see cref="M:Friflo.Engine.ECS.EntityStoreBase.GetUniqueEntity(System.String)"/> to query for this entity.<br/>
            <br/>
            Optionally attribute the implementing struct with <see cref="T:Friflo.Engine.ECS.TagNameAttribute"/><br/>
            to assign a custom tag name used for JSON serialization.
            </remarks>
        </member>
        <member name="T:Friflo.Engine.ECS.Disabled">
            <summary>
            If entity <see cref="P:Friflo.Engine.ECS.Entity.Enabled"/> == false it is tagged with <see cref="T:Friflo.Engine.ECS.Disabled"/>.<br/>
            Disabled entities are excluded from query results by default. To include use <see cref="M:Friflo.Engine.ECS.ArchetypeQuery.WithDisabled"/>.
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.ArchetypeQuery">
            <summary>
            <see cref="T:Friflo.Engine.ECS.ArchetypeQuery"/> and all its generic implementations are designed to be reused.<br/>
            By default an query does not contain <see cref="T:Friflo.Engine.ECS.Disabled"/> entities. Use <see cref="M:Friflo.Engine.ECS.ArchetypeQuery.WithDisabled"/> if needed.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#query-entities">Example.</a>
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.ArchetypeQuery.Count">
            <summary>
            Return the number of entities matching the query.
            </summary>
            <remarks>
            Execution time O(matching <see cref="P:Friflo.Engine.ECS.ArchetypeQuery.Archetypes"/>).<br/>
            Typically there are only a few matching <see cref="P:Friflo.Engine.ECS.ArchetypeQuery.Archetypes"/>.
            </remarks>
        </member>
        <member name="P:Friflo.Engine.ECS.ArchetypeQuery.ChunkCount">
            <summary> Return the number of <c>Chunks</c> returned by the query. </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.ArchetypeQuery.Archetypes">
            <summary> Returns the set of <see cref="T:Friflo.Engine.ECS.Archetype"/>'s matching the query.</summary>
        </member>
        <member name="P:Friflo.Engine.ECS.ArchetypeQuery.Store">
            <summary> The <see cref="T:Friflo.Engine.ECS.EntityStore"/> on which the query operates. </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.ArchetypeQuery.Entities">
            <summary>
            Return the <see cref="T:Friflo.Engine.ECS.ArchetypeQuery"/> entities mainly for debugging.<br/>
            For efficient access to entity <see cref="T:Friflo.Engine.ECS.IComponent"/>'s use one of the generic <c>EntityStore.Query()</c> methods. 
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.ArchetypeQuery.EventFilter">
            <summary>
            An <see cref="T:Friflo.Engine.ECS.EventFilter"/> used to filter the query result for added/removed components/tags.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#eventfilter">Example.</a>
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.ArchetypeQuery.AllTags(Friflo.Engine.ECS.Tags@)">
            <summary> A query result will contain only entities having all passed <paramref name="tags"/>. </summary>
            <param name="tags"> Use <c>Tags.Get&lt;>()</c> to set the parameter. </param>
        </member>
        <member name="M:Friflo.Engine.ECS.ArchetypeQuery.AnyTags(Friflo.Engine.ECS.Tags@)">
            <summary> A query result will contain only entities having any of the the passed <paramref name="tags"/>. </summary>
            <param name="tags"> Use <c>Tags.Get&lt;>()</c> to set the parameter. </param>
        </member>
        <member name="M:Friflo.Engine.ECS.ArchetypeQuery.WithDisabled">
            <summary> A query result will contain <see cref="T:Friflo.Engine.ECS.Disabled"/> entities. </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.ArchetypeQuery.WithoutAllTags(Friflo.Engine.ECS.Tags@)">
            <summary> Entities having all passed <paramref name="tags"/> are excluded from query result. </summary>
            <param name="tags"> Use <c>Tags.Get&lt;>()</c> to set the parameter. </param>
        </member>
        <member name="M:Friflo.Engine.ECS.ArchetypeQuery.WithoutAnyTags(Friflo.Engine.ECS.Tags@)">
            <summary> Entities having any of the passed <paramref name="tags"/> are excluded from query result. </summary>
            <param name="tags"> Use <c>Tags.Get&lt;>()</c> to set the parameter. </param>
        </member>
        <member name="M:Friflo.Engine.ECS.ArchetypeQuery.AllComponents(Friflo.Engine.ECS.ComponentTypes@)">
            <summary> A query result will contain only entities having all passed <paramref name="componentTypes"/>. </summary>
            <param name="componentTypes"> Use <c>ComponentTypes.Get&lt;>()</c> to set the parameter. </param>
        </member>
        <member name="M:Friflo.Engine.ECS.ArchetypeQuery.AnyComponents(Friflo.Engine.ECS.ComponentTypes@)">
            <summary> A query result will contain only entities having any of the the passed <paramref name="componentTypes"/>. </summary>
            <param name="componentTypes"> Use <c>ComponentTypes.Get&lt;>()</c> to set the parameter. </param>
        </member>
        <member name="M:Friflo.Engine.ECS.ArchetypeQuery.WithoutAllComponents(Friflo.Engine.ECS.ComponentTypes@)">
            <summary> Entities having all passed <paramref name="componentTypes"/> are excluded from query result. </summary>
            <param name="componentTypes"> Use <c>ComponentTypes.Get&lt;>()</c> to set the parameter. </param>
        </member>
        <member name="M:Friflo.Engine.ECS.ArchetypeQuery.WithoutAnyComponents(Friflo.Engine.ECS.ComponentTypes@)">
            <summary> Entities having any of the passed <paramref name="componentTypes"/> are excluded from query result. </summary>
            <param name="componentTypes"> Use <c>ComponentTypes.Get&lt;>()</c> to set the parameter. </param>
        </member>
        <member name="M:Friflo.Engine.ECS.ArchetypeQuery.HasEvent(System.Int32)">
            <summary>
            Returns true if a component or tag was added / removed to / from the entity with the passed <paramref name="entityId"/>.
            </summary>
            <remarks>
            Therefore <see cref="P:Friflo.Engine.ECS.EntityStore.EventRecorder"/> needs to be enabled and<br/> 
            the component / tag (add / remove) events of interest need to be added to the <see cref="P:Friflo.Engine.ECS.ArchetypeQuery.EventFilter"/>.<br/>
            <br/>
            <b>Note</b>: <see cref="M:Friflo.Engine.ECS.ArchetypeQuery.HasEvent(System.Int32)"/> can be called from any thread.<br/>
            No structural changes like adding / removing components/tags must not be executed at the same time by another thread.
            </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.ArchetypeQuery.#ctor(Friflo.Engine.ECS.EntityStoreBase,Friflo.Engine.ECS.SignatureIndexes@)">
            <summary>
            Called by generic ArchetypeQuery constructors. <br/>
            <see cref="T:Friflo.Engine.ECS.Disabled"/> entities excluded by default.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.ArchetypeQuery.#ctor(Friflo.Engine.ECS.EntityStoreBase,Friflo.Engine.ECS.ComponentTypes@)">
            <summary>
            Called by <see cref="M:Friflo.Engine.ECS.EntityStoreBase.Query"/>. <br/>
            <see cref="T:Friflo.Engine.ECS.Disabled"/> entities excluded by default.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.ArchetypeQuery.#ctor(Friflo.Engine.ECS.EntityStoreBase)">
            <summary> Called by <see cref="M:Friflo.Engine.ECS.EntityStore.GetEntities"/> </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.ArchetypeQuery.#ctor(Friflo.Engine.ECS.Archetype)">
            <summary> Called by <see cref="M:Friflo.Engine.ECS.Archetype.GetEntities"/> </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.ArchetypeQuery.Reset">
            <remarks>
            Reset <see cref="F:Friflo.Engine.ECS.ArchetypeQuery.lastArchetypeCount"/> to force update of <see cref="F:Friflo.Engine.ECS.ArchetypeQuery.archetypes"/> on subsequent call to <see cref="P:Friflo.Engine.ECS.ArchetypeQuery.Archetypes"/>
            </remarks>
        </member>
        <member name="T:Friflo.Engine.ECS.Chunks`1">
            <summary>
            Contains the components returned by a component query.
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#enumerate-query-chunks">Example.</a>
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.QueryChunks`1">
            <summary>
            Contains the component chunks returned by a component query.
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#enumerate-query-chunks">Example.</a>
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.ChunkEnumerator`1.Current">
            <summary>return Current by reference to avoid struct copy and enable mutation in library</summary>
        </member>
        <member name="T:Friflo.Engine.ECS.ForEachEntity`1">
            <summary>
            Provide the state of an <paramref name="entity"/> within <see cref="M:Friflo.Engine.ECS.ArchetypeQuery`1.ForEachEntity(Friflo.Engine.ECS.ForEachEntity{`0})"/>.
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.ArchetypeQuery`1">
            <summary>
            A query instance use to retrieve the given component types.
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#query-entities">Example.</a>
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.ArchetypeQuery`1.Chunks">
            <summary>
            Return the <see cref="T:Friflo.Engine.ECS.Chunk`1"/>'s storing the components and entities of an <see cref="T:Friflo.Engine.ECS.ArchetypeQuery`1"/>.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#enumerate-query-chunks">Example.</a>
            </summary> 
        </member>
        <member name="M:Friflo.Engine.ECS.ArchetypeQuery`1.ForEach(System.Action{Friflo.Engine.ECS.Chunk{`0},Friflo.Engine.ECS.ChunkEntities})">
            <summary>
            Returns a <see cref="T:Friflo.Engine.ECS.QueryJob"/> that enables <see cref="F:Friflo.Engine.ECS.JobExecution.Parallel"/> query execution.  
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.ArchetypeQuery`1.ForEachEntity(Friflo.Engine.ECS.ForEachEntity{`0})">
            <summary>
            Executes the given <paramref name="lambda"/> for each entity in the query result.
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.QueryJob`1">
            <summary>
            Enables <see cref="F:Friflo.Engine.ECS.JobExecution.Parallel"/> query execution returning the specified components.
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#parallel-query-job">Example.</a>
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.QueryJob`1.RunParallel">
            <summary>Execute the query.
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#parallel-query-job">Example.</a>.<br/>
            All chunks having at least <see cref="P:Friflo.Engine.ECS.QueryJob.MinParallelChunkLength"/> * <see cref="P:Friflo.Engine.ECS.ParallelJobRunner.ThreadCount"/>
            components are executed <see cref="F:Friflo.Engine.ECS.JobExecution.Parallel"/>. 
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.Chunks`2">
            <summary>
            Contains the components returned by a component query.
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#enumerate-query-chunks">Example.</a>
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.QueryChunks`2">
            <summary>
            Contains the component chunks returned by a component query.
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#enumerate-query-chunks">Example.</a>
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.ChunkEnumerator`2.Current">
            <summary>return Current by reference to avoid struct copy and enable mutation in library</summary>
        </member>
        <member name="T:Friflo.Engine.ECS.ForEachEntity`2">
            <summary>
            Provide the state of an <paramref name="entity"/> within <see cref="M:Friflo.Engine.ECS.ArchetypeQuery`2.ForEachEntity(Friflo.Engine.ECS.ForEachEntity{`0,`1})"/>.
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.ArchetypeQuery`2">
            <summary>
            A query instance use to retrieve the given component types.
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#query-entities">Example.</a>
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.ArchetypeQuery`2.Chunks">
            <summary>
            Return the <see cref="T:Friflo.Engine.ECS.Chunk`1"/>'s storing the components and entities of an <see cref="T:Friflo.Engine.ECS.ArchetypeQuery`2"/>.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#enumerate-query-chunks">Example.</a>
            </summary> 
        </member>
        <member name="M:Friflo.Engine.ECS.ArchetypeQuery`2.ForEach(System.Action{Friflo.Engine.ECS.Chunk{`0},Friflo.Engine.ECS.Chunk{`1},Friflo.Engine.ECS.ChunkEntities})">
            <summary>
            Returns a <see cref="T:Friflo.Engine.ECS.QueryJob"/> that enables <see cref="F:Friflo.Engine.ECS.JobExecution.Parallel"/> query execution.  
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.ArchetypeQuery`2.ForEachEntity(Friflo.Engine.ECS.ForEachEntity{`0,`1})">
            <summary>
            Executes the given <paramref name="lambda"/> for each entity in the query result.
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.QueryJob`2">
            <summary>
            Enables <see cref="F:Friflo.Engine.ECS.JobExecution.Parallel"/> query execution returning the specified components.
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#parallel-query-job">Example.</a>
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.QueryJob`2.RunParallel">
            <summary>Execute the query.
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#parallel-query-job">Example.</a>.<br/>
            All chunks having at least <see cref="P:Friflo.Engine.ECS.QueryJob.MinParallelChunkLength"/> * <see cref="P:Friflo.Engine.ECS.ParallelJobRunner.ThreadCount"/>
            components are executed <see cref="F:Friflo.Engine.ECS.JobExecution.Parallel"/>. 
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.Chunks`3">
            <summary>
            Contains the components returned by a component query.
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#enumerate-query-chunks">Example.</a>
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.QueryChunks`3">
            <summary>
            Contains the component chunks returned by a component query.
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#enumerate-query-chunks">Example.</a>
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.ChunkEnumerator`3.Current">
            <summary>return Current by reference to avoid struct copy and enable mutation in library</summary>
        </member>
        <member name="T:Friflo.Engine.ECS.ForEachEntity`3">
            <summary>
            Provide the state of an <paramref name="entity"/> within <see cref="M:Friflo.Engine.ECS.ArchetypeQuery`3.ForEachEntity(Friflo.Engine.ECS.ForEachEntity{`0,`1,`2})"/>.
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.ArchetypeQuery`3">
            <summary>
            A query instance use to retrieve the given component types.
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#query-entities">Example.</a>
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.ArchetypeQuery`3.Chunks">
            <summary>
            Return the <see cref="T:Friflo.Engine.ECS.Chunk`1"/>'s storing the components and entities of an <see cref="T:Friflo.Engine.ECS.ArchetypeQuery`3"/>.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#enumerate-query-chunks">Example.</a>
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.ArchetypeQuery`3.ForEach(System.Action{Friflo.Engine.ECS.Chunk{`0},Friflo.Engine.ECS.Chunk{`1},Friflo.Engine.ECS.Chunk{`2},Friflo.Engine.ECS.ChunkEntities})">
            <summary>
            Returns a <see cref="T:Friflo.Engine.ECS.QueryJob"/> that enables <see cref="F:Friflo.Engine.ECS.JobExecution.Parallel"/> query execution.  
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.ArchetypeQuery`3.ForEachEntity(Friflo.Engine.ECS.ForEachEntity{`0,`1,`2})">
            <summary>
            Executes the given <paramref name="lambda"/> for each entity in the query result.
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.QueryJob`3">
            <summary>
            Enables <see cref="F:Friflo.Engine.ECS.JobExecution.Parallel"/> query execution returning the specified components.
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#parallel-query-job">Example.</a>
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.QueryJob`3.RunParallel">
            <summary>Execute the query.
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#parallel-query-job">Example.</a>.<br/>
            All chunks having at least <see cref="P:Friflo.Engine.ECS.QueryJob.MinParallelChunkLength"/> * <see cref="P:Friflo.Engine.ECS.ParallelJobRunner.ThreadCount"/>
            components are executed <see cref="F:Friflo.Engine.ECS.JobExecution.Parallel"/>. 
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.Chunks`4">
            <summary>
            Contains the components returned by a component query.
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#enumerate-query-chunks">Example.</a>
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.QueryChunks`4">
            <summary>
            Contains the component chunks returned by a component query.
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#enumerate-query-chunks">Example.</a>
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.ChunkEnumerator`4.Current">
            <summary>return Current by reference to avoid struct copy and enable mutation in library</summary>
        </member>
        <member name="T:Friflo.Engine.ECS.ForEachEntity`4">
            <summary>
            Provide the state of an <paramref name="entity"/> within <see cref="M:Friflo.Engine.ECS.ArchetypeQuery`4.ForEachEntity(Friflo.Engine.ECS.ForEachEntity{`0,`1,`2,`3})"/>.
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.ArchetypeQuery`4">
            <summary>
            A query instance use to retrieve the given component types.
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#query-entities">Example.</a>
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.ArchetypeQuery`4.Chunks">
            <summary>
            Return the <see cref="T:Friflo.Engine.ECS.Chunk`1"/>'s storing the components and entities of an <see cref="T:Friflo.Engine.ECS.ArchetypeQuery`4"/>.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#enumerate-query-chunks">Example.</a>
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.ArchetypeQuery`4.ForEach(System.Action{Friflo.Engine.ECS.Chunk{`0},Friflo.Engine.ECS.Chunk{`1},Friflo.Engine.ECS.Chunk{`2},Friflo.Engine.ECS.Chunk{`3},Friflo.Engine.ECS.ChunkEntities})">
            <summary>
            Returns a <see cref="T:Friflo.Engine.ECS.QueryJob"/> that enables <see cref="F:Friflo.Engine.ECS.JobExecution.Parallel"/> query execution.  
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.ArchetypeQuery`4.ForEachEntity(Friflo.Engine.ECS.ForEachEntity{`0,`1,`2,`3})">
            <summary>
            Executes the given <paramref name="lambda"/> for each entity in the query result.
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.QueryJob`4">
            <summary>
            Enables <see cref="F:Friflo.Engine.ECS.JobExecution.Parallel"/> query execution returning the specified components.
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#parallel-query-job">Example.</a>
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.QueryJob`4.RunParallel">
            <summary>Execute the query.
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#parallel-query-job">Example.</a>.<br/>
            All chunks having at least <see cref="P:Friflo.Engine.ECS.QueryJob.MinParallelChunkLength"/> * <see cref="P:Friflo.Engine.ECS.ParallelJobRunner.ThreadCount"/>
            components are executed <see cref="F:Friflo.Engine.ECS.JobExecution.Parallel"/>. 
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.Chunks`5">
            <summary>
            Contains the components returned by a component query.
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#enumerate-query-chunks">Example.</a>
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.QueryChunks`5">
            <summary>
            Contains the component chunks returned by a component query.
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#enumerate-query-chunks">Example.</a>
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.ChunkEnumerator`5.Current">
            <summary>return Current by reference to avoid struct copy and enable mutation in library</summary>
        </member>
        <member name="T:Friflo.Engine.ECS.ForEachEntity`5">
            <summary>
            Provide the state of an <paramref name="entity"/> within <see cref="M:Friflo.Engine.ECS.ArchetypeQuery`5.ForEachEntity(Friflo.Engine.ECS.ForEachEntity{`0,`1,`2,`3,`4})"/>.
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.ArchetypeQuery`5">
            <summary>
            A query instance use to retrieve the given component types.
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#query-entities">Example.</a>
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.ArchetypeQuery`5.Chunks">
            <summary>
            Return the <see cref="T:Friflo.Engine.ECS.Chunk`1"/>'s storing the components and entities of an <see cref="T:Friflo.Engine.ECS.ArchetypeQuery`5"/>.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#enumerate-query-chunks">Example.</a>
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.ArchetypeQuery`5.ForEach(System.Action{Friflo.Engine.ECS.Chunk{`0},Friflo.Engine.ECS.Chunk{`1},Friflo.Engine.ECS.Chunk{`2},Friflo.Engine.ECS.Chunk{`3},Friflo.Engine.ECS.Chunk{`4},Friflo.Engine.ECS.ChunkEntities})">
            <summary>
            Returns a <see cref="T:Friflo.Engine.ECS.QueryJob"/> that enables <see cref="F:Friflo.Engine.ECS.JobExecution.Parallel"/> query execution.  
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.ArchetypeQuery`5.ForEachEntity(Friflo.Engine.ECS.ForEachEntity{`0,`1,`2,`3,`4})">
            <summary>
            Executes the given <paramref name="lambda"/> for each entity in the query result.
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.QueryJob`5">
            <summary>
            Enables <see cref="F:Friflo.Engine.ECS.JobExecution.Parallel"/> query execution returning the specified components.
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#parallel-query-job">Example.</a>
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.QueryJob`5.RunParallel">
            <summary>Execute the query.
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#parallel-query-job">Example.</a>.<br/>
            All chunks having at least <see cref="P:Friflo.Engine.ECS.QueryJob.MinParallelChunkLength"/> * <see cref="P:Friflo.Engine.ECS.ParallelJobRunner.ThreadCount"/>
            components are executed <see cref="F:Friflo.Engine.ECS.JobExecution.Parallel"/>. 
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.Chunk`1">
            <summary>
            A <see cref="T:Friflo.Engine.ECS.Chunk`1"/> is container of <b>struct</b> components of Type <typeparamref name="T"/>.
            </summary>
            <remarks>
            <see cref="T:Friflo.Engine.ECS.Chunk`1"/>'s are typically returned a <see cref="T:Friflo.Engine.ECS.ArchetypeQuery`1"/>.<see cref="P:Friflo.Engine.ECS.ArchetypeQuery`1.Chunks"/> enumerator.<br/>
            <br/>
            Its items can be accessed or changed with <see cref="P:Friflo.Engine.ECS.Chunk`1.Item(System.Int32)"/> or <see cref="P:Friflo.Engine.ECS.Chunk`1.Span"/>.<br/>
            The <see cref="T:Friflo.Engine.ECS.Chunk`1"/> implementation also support <b>vectorization</b>
            of <a href="https://github.com/dotnet/runtime/blob/main/docs/coding-guidelines/vectorization-guidelines.md">Vector types</a><br/>
            by <see cref="M:Friflo.Engine.ECS.Chunk`1.AsSpan128``1"/>, <see cref="M:Friflo.Engine.ECS.Chunk`1.AsSpan256``1"/> and <see cref="M:Friflo.Engine.ECS.Chunk`1.AsSpan512``1"/>.
            <br/>
            <br/> <i>See vectorization example</i> at <see cref="M:Friflo.Engine.ECS.Chunk`1.AsSpan256``1"/>.
            </remarks>
            <typeparam name="T"><see cref="T:Friflo.Engine.ECS.IComponent"/> type of a struct component.</typeparam>
        </member>
        <member name="P:Friflo.Engine.ECS.Chunk`1.Span">
            <summary> Return the components in a <see cref="T:Friflo.Engine.ECS.Chunk`1"/> as a <see cref="P:Friflo.Engine.ECS.Chunk`1.Span"/>. </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.Chunk`1.Length">
            <summary> Return the number of components in a <see cref="T:Friflo.Engine.ECS.Chunk`1"/>. </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.Chunk`1.AsSpan256``1">
            <summary>
            Return the components as a <see cref="T:System.Span`1"/> of type <typeparamref name="TTo"/> - which can be assigned to Vector256{TTo}'s.<br/>
            The returned <see cref="T:System.Span`1"/> contains padding elements on its tail to enable safe conversion to a Vector256{TTo}.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#query-vectorization---simd">Example.</a>.
            </summary>
            <remarks>
            By adding padding elements the returned <see cref="T:System.Span`1"/> can be converted to Vector256's <br/>
            without the need of an additional <b>for</b> loop to process the elements at the tail of the <see cref="T:System.Span`1"/>.<br/>
            <br/>
            <i>Vectorization example:</i><br/>
            <code>
                // e.g. using: struct ByteComponent : IComponent { public byte value; }
                var add = Vector256.Create&lt;byte>(1);                // create byte[32] vector - all values = 1
                foreach (var (component, _) in query.Chunks)
                {    
                    var bytes   = component.AsSpan256&lt;byte>();      // bytes.Length - multiple of 32
                    var step    = component.StepSpan256;            // step = 32
                    for (int n = 0; n &lt; bytes.Length; n += step) {
                        var slice   = bytes.Slice(n, step);
                        var value   = Vector256.Create&lt;byte>(slice);
                        var result  = Vector256.Add(value, add);    // execute 32 add instructions at once
                        result.CopyTo(slice);
                    }
                }
            </code>
            </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.Chunk`1.AsSpan128``1">
            <summary>
            Return the components as a <see cref="T:System.Span`1"/> of type <typeparamref name="TTo"/>.<br/>
            The returned <see cref="T:System.Span`1"/> contains padding elements on its tail to enable assignment to Vector128{TTo}.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#query-vectorization---simd">Example.</a>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.Chunk`1.AsSpan512``1">
            <summary>
            Return the components as a <see cref="T:System.Span`1"/> of type <typeparamref name="TTo"/>.<br/>
            The returned <see cref="T:System.Span`1"/> contains padding elements on its tail to enable assignment to Vector512.<br/>
             See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#query-vectorization---simd">Example.</a>.
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.Chunk`1.StepSpan128">
            <summary>
            The step value in a for loop when converting a <see cref="M:Friflo.Engine.ECS.Chunk`1.AsSpan128``1"/> value to a Vector128{T}.
            <br/><br/> See example at <see cref="M:Friflo.Engine.ECS.Chunk`1.AsSpan256``1"/>.
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.Chunk`1.StepSpan256">
            <summary>
            The step value in a for loop when converting a <see cref="M:Friflo.Engine.ECS.Chunk`1.AsSpan256``1"/> value to a Vector256{T}.
            <br/><br/> See example at <see cref="M:Friflo.Engine.ECS.Chunk`1.AsSpan256``1"/>.
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.Chunk`1.StepSpan512">
            <summary>
            The step value in a for loop when converting a <see cref="M:Friflo.Engine.ECS.Chunk`1.AsSpan512``1"/> value to a <c>Vector512{T}</c>
            <br/><br/> See example at <see cref="M:Friflo.Engine.ECS.Chunk`1.AsSpan256``1"/>.
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.Chunk`1.Item(System.Int32)">
            <summary> Return the component at the passed <paramref name="index"/> as a reference. </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.ChunkEntities">
            <summary>
            Provide the entity <see cref="F:Friflo.Engine.ECS.Entity.Id"/>'s for <see cref="T:Friflo.Engine.ECS.Chunk`1"/> components using <see cref="P:Friflo.Engine.ECS.ChunkEntities.Ids"/> or <see cref="P:Friflo.Engine.ECS.ChunkEntities.Item(System.Int32)"/>.<br/>
            </summary>
            <remarks>
            Its <see cref="F:Friflo.Engine.ECS.ChunkEntities.Length"/> is equal to the <see cref="T:Friflo.Engine.ECS.Chunk`1"/>.<see cref="F:Friflo.Engine.ECS.Chunk`1.Length"/>.<br/>
            <br/>
            It implements <see cref="T:System.Collections.Generic.IEnumerable`1"/> only to provide comprehensive information of <see cref="T:Friflo.Engine.ECS.Entity"/>'s in a debugger.<br/>
            Its unlikely to enumerate <see cref="T:Friflo.Engine.ECS.ChunkEntities"/> in an application.<br/>
            The recommended methods used by an application are <see cref="P:Friflo.Engine.ECS.ChunkEntities.Ids"/>, <see cref="P:Friflo.Engine.ECS.ChunkEntities.Item(System.Int32)"/> or <see cref="M:Friflo.Engine.ECS.ChunkEntities.EntityAt(System.Int32)"/>.  
            </remarks>
        </member>
        <member name="P:Friflo.Engine.ECS.ChunkEntities.Ids">
            <summary> Return the entity <see cref="F:Friflo.Engine.ECS.Entity.Id"/>'s for the components in a <see cref="T:Friflo.Engine.ECS.Chunk`1"/>. </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.ChunkEntities.Archetype">
            <summary> The <see cref="F:Friflo.Engine.ECS.ChunkEntities.Archetype"/> containing the <see cref="T:Friflo.Engine.ECS.Chunk`1"/> components. </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.ChunkEntities.Length">
            <summary> The number of entities in <see cref="T:Friflo.Engine.ECS.ChunkEntities"/>. </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.ChunkEntities.Execution">
            <summary> The execution type used to provide the chunk entities. </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.ChunkEntities.TaskIndex">
            <summary>
            if    0 - The entities are provided from the main (caller) thread using <c>foreach(...)</c> loop,
            <see cref="M:Friflo.Engine.ECS.QueryJob.Run"/> or <see cref="M:Friflo.Engine.ECS.QueryJob.RunParallel"/>.<br/>
            if >= 1 - The entities are provided from a worker thread using <see cref="M:Friflo.Engine.ECS.QueryJob.RunParallel"/>.
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.ChunkEntities.Item(System.Int32)">
            <summary>
            Return the entity <see cref="F:Friflo.Engine.ECS.Entity.Id"/> for a <see cref="T:Friflo.Engine.ECS.Chunk`1"/> component at the given <paramref name="index"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.ChunkEntities.EntityAt(System.Int32)">
            <summary>
            Return the <see cref="T:Friflo.Engine.ECS.Entity"/> for a <see cref="T:Friflo.Engine.ECS.Chunk`1"/> component at the given <paramref name="index"/>.
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.ChunkEntitiesEnumerator">
            <summary>
            Used to enumerate the <see cref="T:Friflo.Engine.ECS.Entity"/>'s of <see cref="T:Friflo.Engine.ECS.ChunkEntities"/>.
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.ChunkEntitiesEnumerator.Current">
            <summary> The current <see cref="T:Friflo.Engine.ECS.Entity"/> of the enumerator. </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.JobExecution">
            <summary>
            Specify the way how <see cref="T:Friflo.Engine.ECS.ChunkEntities"/> are provided by either a <c>foreach</c> loop,
            <see cref="M:Friflo.Engine.ECS.QueryJob.Run"/> or <see cref="M:Friflo.Engine.ECS.QueryJob.RunParallel"/>.
            </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.JobExecution.Sequential">
            <summary><see cref="T:Friflo.Engine.ECS.ChunkEntities"/> are provided by a <c>foreach</c> loop or <see cref="M:Friflo.Engine.ECS.QueryJob.Run"/>.</summary>
        </member>
        <member name="F:Friflo.Engine.ECS.JobExecution.Parallel">
            <summary><see cref="T:Friflo.Engine.ECS.ChunkEntities"/> are provided by a <see cref="M:Friflo.Engine.ECS.QueryJob.RunParallel"/>.</summary>
        </member>
        <member name="T:Friflo.Engine.ECS.ParallelJobRunner">
            <summary>
            Required for parallel - multi threaded - query job execution using <see cref="M:Friflo.Engine.ECS.QueryJob.RunParallel"/>.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#parallel-query-job">Example.</a>
            </summary>
            <remarks>
            <see cref="T:Friflo.Engine.ECS.ParallelJobRunner"/> is thread safe.<br/>
            The intention is to use the same instance for all jobs. E.g. the JobRunner assigned to the <see cref="T:Friflo.Engine.ECS.EntityStore"/>.<br/>
            The job runner divide a job in multiple tasks each executed on its own core.<br/>
            This ensures high cache hit rate of code and data structures.<br/>
            <br/>
            <i>Constraint</i><br/>
            When executing nested jobs - running a job within another job - the nested job requires its own runner.<br/> 
            <br/>
            Performance related implementation goals:<br/>
            - Minimize calls to synchronization primitives.<br/>
            - Use cheap synchronization primitives such as:
              <see cref="T:System.Threading.ManualResetEventSlim"/>, <see cref="T:System.Threading.Interlocked"/> and <see cref="T:System.Threading.Volatile"/>.<br/>
            - Minimize thread context switches caused by <see cref="T:System.Threading.ManualResetEventSlim"/> in case calling
              <see cref="M:System.Threading.ManualResetEventSlim.Wait"/> when the event is not signaled.<br/>
            Note: To analyze the amount of thread context switches use: Process Explorer > Column > CSwitch Delta.
            </remarks>
        </member>
        <member name="T:Friflo.Engine.ECS.QueryEntities">
            <summary>
            Provide the result set of an <see cref="T:Friflo.Engine.ECS.ArchetypeQuery"/> as a set of <see cref="T:Friflo.Engine.ECS.Entity"/>'s.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.QueryEntities.ApplyBatch(Friflo.Engine.ECS.EntityBatch)">
            <summary>
            Apply the given entity <paramref name="batch"/> to all entities in this set.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#entitybatch---query">Example.</a>
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.EntitiesEnumerator">
            <summary>
            Used to enumerate the <see cref="P:Friflo.Engine.ECS.ArchetypeQuery.Entities"/> of an  <see cref="T:Friflo.Engine.ECS.ArchetypeQuery"/>.
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.QueryJob">
            <summary>
            A <see cref="T:Friflo.Engine.ECS.QueryJob"/> enables <see cref="F:Friflo.Engine.ECS.JobExecution.Parallel"/> query execution using multiple threads
            to reduce execution time of large queries.<br/>
            They are created by the <c>ArchetypeQuery.ForEach()</c> methods.
            </summary>
            <remarks>
            To execute a query job <see cref="F:Friflo.Engine.ECS.JobExecution.Sequential"/> use the <see cref="M:Friflo.Engine.ECS.QueryJob.Run"/> method.<br/>
            To execute a query job <see cref="F:Friflo.Engine.ECS.JobExecution.Parallel"/> use the <see cref="M:Friflo.Engine.ECS.QueryJob.RunParallel"/> method.
            </remarks>
        </member>
        <member name="P:Friflo.Engine.ECS.QueryJob.JobRunner">
            <summary> The job runner used to execute a query <see cref="F:Friflo.Engine.ECS.JobExecution.Parallel"/>. </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.QueryJob.MinParallelChunkLength">
            <summary>
            The minimum number of <see cref="T:Friflo.Engine.ECS.Chunk`1"/> components per thread required to execute a query <see cref="F:Friflo.Engine.ECS.JobExecution.Parallel"/>.<br/>
            Default: 1000.
            </summary>
            <remarks>
            Parallel query execution adds an overhead of 1 to 2 micro seconds per query for thread synchronization.<br/>
            Execution of a simple computation like <c>health.value++</c> on a single component takes 0.5 to 1 nano seconds.<br/>
            <br/>
            E.g. processing a chunk with 100 components will take 50 to 100 nano seconds.<br/>
            So the chunk components are executed <see cref="F:Friflo.Engine.ECS.JobExecution.Sequential"/> to avoid the parallelization overhead.<br/>
            <br/>
            For more complex computations <see cref="P:Friflo.Engine.ECS.QueryJob.MinParallelChunkLength"/> can be reduced to execute a query
            <see cref="F:Friflo.Engine.ECS.JobExecution.Parallel"/> when dealing with a lower number of components.
            </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.QueryJob.Run">
            <summary>
            Execute the query <see cref="F:Friflo.Engine.ECS.JobExecution.Sequential"/>.
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.QueryJob.RunParallel">
            <summary>Execute the query.
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#parallel-query-job">Example.</a>.<br/>
            All chunks having at least <see cref="P:Friflo.Engine.ECS.QueryJob.MinParallelChunkLength"/> * <see cref="P:Friflo.Engine.ECS.ParallelJobRunner.ThreadCount"/>
            components are executed <see cref="F:Friflo.Engine.ECS.JobExecution.Parallel"/>. 
            </summary>
            <remarks>
            Requires an <see cref="T:Friflo.Engine.ECS.ParallelJobRunner"/>.<br/>
            A runner can be assigned to <see cref="P:Friflo.Engine.ECS.QueryJob.JobRunner"/> or to the <see cref="T:Friflo.Engine.ECS.EntityStore"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                If the <see cref="P:Friflo.Engine.ECS.QueryJob.JobRunner"/> is not set.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                If a nested <see cref="M:Friflo.Engine.ECS.QueryJob.RunParallel"/> is using the same <see cref="P:Friflo.Engine.ECS.QueryJob.JobRunner"/> as the enclosing job. 
            </exception>
        </member>
        <member name="P:Friflo.Engine.ECS.QueryJob.ParallelComponentMultiple">
            <summary>
            The <see cref="P:Friflo.Engine.ECS.QueryJob.ParallelComponentMultiple"/> is used to align the <see cref="T:Friflo.Engine.ECS.Chunk`1"/> components length 
            of a <see cref="F:Friflo.Engine.ECS.JobExecution.Parallel"/> executed component chunks.
            </summary>
            <remarks>
            This enables vectorization of the components without a remainder loop using<br/>
            <see cref="M:Friflo.Engine.ECS.Chunk`1.AsSpan128``1"/>, <see cref="M:Friflo.Engine.ECS.Chunk`1.AsSpan256``1"/> or <see cref="M:Friflo.Engine.ECS.Chunk`1.AsSpan512``1"/>.
            </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.QueryJob.GetSectionSize(System.Int32,System.Int32,System.Int32)">
            <remarks>
            The return size which is applied to every section <see cref="T:Friflo.Engine.ECS.Chunk`1"/>.<br/>
            <br/>
            In case <paramref name="multiple"/> != 0 the returned size ensures the number of bytes required for
            section size components is a multiple of 64 bytes.<br/>
            This enables vectorization using Vector128, Vector256 or Vector512 without a remainder loop.<br/>
            See <see cref="M:Friflo.Engine.ECS.Chunk`1.AsSpan128``1"/>, <see cref="M:Friflo.Engine.ECS.Chunk`1.AsSpan256``1"/> an <see cref="M:Friflo.Engine.ECS.Chunk`1.AsSpan512``1"/>.  
            </remarks>
        </member>
        <member name="T:Friflo.Engine.ECS.RawEntity">
            <remarks>
            <b>Hard rule</b><br/>
            All fields must be blittable types. As the intention is to store millions (or billions) of <see cref="T:Friflo.Engine.ECS.RawEntity"/>'s
            in <see cref="T:Friflo.Engine.ECS.RawEntityStore"/>.<see cref="F:Friflo.Engine.ECS.RawEntityStore.entities"/>.<br/>
            This enables that the GC will not iterate <see cref="F:Friflo.Engine.ECS.RawEntityStore.entities"/> when performing a GC.Collect().
            </remarks>
        </member>
        <member name="T:Friflo.Engine.ECS.RawEntityStore">
            <summary>
            A <see cref="T:Friflo.Engine.ECS.RawEntityStore"/> enables using an entity store without using <see cref="T:Friflo.Engine.ECS.Entity"/>'s.<br/>
            </summary>
            <remarks>
            The focus of the this entity store implementation is performance.<br/>
            The key is to minimize heap consumption required by <see cref="T:Friflo.Engine.ECS.EntityNode"/>'s - 48 bytes<br/>
            A <see cref="T:Friflo.Engine.ECS.RawEntityStore"/> stores only an array of blittable <see cref="T:Friflo.Engine.ECS.RawEntity"/>'s -
            structs having no reference type fields.<br/>
            <br/>
            The downside of this approach are:<br/>
            <list type="bullet">
              <item>Entities can be created only programmatically but not within the editor which requires (managed) <see cref="T:Friflo.Engine.ECS.Entity"/>'s.</item>
              <item>The API to access / query / mutate <see cref="T:Friflo.Engine.ECS.RawEntity"/>'s is less convenient.<br/>
                It requires always two parameters - a <see cref="T:Friflo.Engine.ECS.RawEntityStore"/> + entity <c>id</c> - instead of a single <see cref="T:Friflo.Engine.ECS.Entity"/> reference.
              </item>
            </list>
            </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.RawEntityStore.CreateEntity(Friflo.Engine.ECS.Archetype)">
            <summary>
            Creates a new entity with the components and tags of the given <paramref name="archetype"/>
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.Script">
            <summary>
            To enable adding a script class to an <see cref="T:Friflo.Engine.ECS.Entity"/> it need to extend <see cref="T:Friflo.Engine.ECS.Script"/>.<br/>
            See <a href="https://github.com/friflo/Friflo.Json.Fliox/blob/main/Engine/README.md#script">Example.</a>
            </summary>
            <remarks>
            A <see cref="T:Friflo.Engine.ECS.Script"/> is a reference type - a class-  which contains data <b>and</b> behavior - aka scripts / methods.<br/> 
            An <see cref="T:Friflo.Engine.ECS.Entity"/> can contain multiple <see cref="T:Friflo.Engine.ECS.Script"/>'s but only one of each type.<br/>
            <see cref="T:Friflo.Engine.ECS.Script"/>'s can be used if <b>OPP</b> programming approach is preferred
            and dealing with less than a few 1.000 instances.<br/>
            <br/>
            Optionally attribute the extended class with <see cref="T:Friflo.Engine.ECS.ComponentKeyAttribute"/><br/>
            to assign a custom component key name used for JSON serialization.<br/>
            <br/>
            <i>Info:</i> Its functionality is similar to a class extending <c>MonoBehaviour</c> added to a <c>GameObject</c> in Unity.
            </remarks>
        </member>
        <member name="P:Friflo.Engine.ECS.Script.Entity">
            <summary>The entity the component is added to. Otherwise null.</summary>
        </member>
        <member name="T:Friflo.Engine.ECS.Serialize.ComponentReader">
            <summary>
            Create all components / scripts for an entity from <see cref="T:Friflo.Json.Fliox.JsonValue"/> used as <see cref="F:Friflo.Engine.ECS.Serialize.DataEntity.components"/>
            </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.Serialize.ComponentReader.SetEntityArchetype(Friflo.Engine.ECS.Serialize.DataEntity,Friflo.Engine.ECS.Entity,Friflo.Engine.ECS.EntityStoreBase)">
            <summary>
            Ensures the given entity present / moved to an <see cref="T:Friflo.Engine.ECS.Archetype"/> that contains all components 
            within the current JSON payload.
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.Serialize.ComponentWriter">
            <summary>
            Create the <see cref="T:Friflo.Json.Fliox.JsonValue"/> from all components and scripts used at <see cref="F:Friflo.Engine.ECS.Serialize.DataEntity.components"/>.<br/>
            </summary>
        </member>
        <member name="T:Friflo.Engine.ECS.Serialize.DataEntity">
            <summary>
            A <see cref="T:Friflo.Engine.ECS.Serialize.DataEntity"/> is used to serialize entities.
            </summary>
            <remarks>
            When reading / writing <see cref="T:Friflo.Engine.ECS.Serialize.DataEntity"/>'s in the editor a special MemoryDatabase" implementation is required.<br/>
            This implementation preserves the order of entities stored in a JSON file.<br/>
            Therefor it stores the order of each entity when loaded and apply this order when writing them back to the JSON file.<br/> 
            <br/>
            Having a stable order is required avoid merge conflicts.<br/>
            Otherwise the entity order in a JSON file would be arbitrary.<br/>
            Even small changes will show a massive diff in version control. 
            </remarks>
        </member>
        <member name="F:Friflo.Engine.ECS.Serialize.DataEntity.pid">
            <summary>permanent id used to identify entities in a database</summary>
        </member>
        <member name="F:Friflo.Engine.ECS.Serialize.DataEntity.children">
            <remarks>
            Use a list of child ids instead of a single field <c>parentId</c> to enable child order.<br/>
            <br/>
            An alternative order implementation - using firstChild, nextSibling - is error prone if referenced nodes are missing.<br/>
            For now the child order is required to enable a memorable order in the editor and to avoid merge conflicts. 
            </remarks>
        </member>
        <member name="F:Friflo.Engine.ECS.Serialize.DataEntity.components">
            <summary>
            Each key in <see cref="F:Friflo.Engine.ECS.Serialize.DataEntity.components"/> defines the type of a component or script. Its value is the component / script value.
            </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.Serialize.DataEntity.tags">
            <summary>List of tags assigned to an entity</summary>
        </member>
        <member name="F:Friflo.Engine.ECS.Serialize.DataEntity.sceneName">
            <summary>if != null the entity is the root of a scene using the assigned <see cref="F:Friflo.Engine.ECS.Serialize.DataEntity.sceneName"/></summary>
        </member>
        <member name="F:Friflo.Engine.ECS.Serialize.DataEntity.prefab">
            <summary>Reference to the `Prefab` the entity is based on</summary>
        </member>
        <member name="F:Friflo.Engine.ECS.Serialize.DataEntity.modify">
            <summary>
            Modify the referenced entity of a`preFab`.<br/> with <see cref="F:Friflo.Engine.ECS.Serialize.DataEntity.components"/> != null<br/>
            Remove the referenced entity if <see cref="F:Friflo.Engine.ECS.Serialize.DataEntity.components"/> == null
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.Serialize.DataEntity.DebugJSON">
            <summary> Return the <b>JSON</b> representation of a <see cref="T:Friflo.Engine.ECS.Serialize.DataEntity"/>. </summary>
            <remarks> Counterpart of <see cref="P:Friflo.Engine.ECS.Entity.DebugJSON"/> </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.Serialize.DataEntitySerializer.Traverse">
            <summary> used to format the <see cref="F:Friflo.Engine.ECS.Serialize.DataEntity.components"/> - one component per line</summary>
        </member>
        <member name="M:Friflo.Engine.ECS.Serialize.EntitySerializer.ReadIntoEntity(Friflo.Engine.ECS.Entity,Friflo.Json.Fliox.JsonValue)">
            <remarks> The "id" in the passed <paramref name="value"/> is ignored. </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.TypeExtensions.Handle(System.Type)">
            create unique id for Type. <see cref="P:System.Type.GUID"/> is no option as it is magnitudes slower
        </member>
        <member name="T:Friflo.Engine.ECS.Utils.BitSet">
            <summary>
            Support a bit set currently limited to 256 bits.<br/>
            If need an additional Vector256Long[] could be added be added for arbitrary length.
            </summary>
        </member>
        <member name="P:Friflo.Engine.ECS.Utils.BitSetEnumerator.Current">
            <returns>the index of the current bit == 1. The index range is [0, ... , 255]</returns>
        </member>
        <member name="M:Friflo.Engine.ECS.Utils.TreeUtils.JsonArrayToDataEntities(Friflo.Json.Fliox.JsonValue,System.Collections.Generic.List{Friflo.Engine.ECS.Serialize.DataEntity})">
            <summary> Convert a JSON array to <see cref="T:Friflo.Engine.ECS.Serialize.DataEntity"/>'s </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.Utils.TreeUtils.DuplicateEntities(System.Collections.Generic.List{Friflo.Engine.ECS.Entity})">
            <returns> the indexes of the duplicated entities within the parent of the original entities</returns>
        </member>
        <member name="M:Friflo.Engine.ECS.Utils.TreeUtils.AddDataEntitiesToEntity(Friflo.Engine.ECS.Entity,System.Collections.Generic.IReadOnlyList{Friflo.Engine.ECS.Serialize.DataEntity})">
            <summary>
            Add the given <paramref name="dataEntities"/> to the specified <paramref name="targetEntity"/>.<br/>
            The <see cref="F:Friflo.Engine.ECS.Serialize.DataEntity.pid"/> and the <see cref="F:Friflo.Engine.ECS.Serialize.DataEntity.children"/> of the given <paramref name="dataEntities"/> 
            are replaced with the pids of the newly created <see cref="T:Friflo.Engine.ECS.Entity"/>'s. 
            </summary>
            <remarks>
            The order of items in <paramref name="dataEntities"/> is not relevant.
            </remarks>
        </member>
        <member name="M:Friflo.Engine.ECS.Utils.TreeUtils.EntitiesToJsonArray(System.Collections.Generic.IEnumerable{Friflo.Engine.ECS.Entity})">
            <summary>
            Create a JSON array from given <paramref name="entities"/> including their <see cref="P:Friflo.Engine.ECS.Entity.ChildEntities"/>.
            </summary>
        </member>
        <member name="F:Friflo.Engine.ECS.Utils.AddDataEntitiesResult.errors">
            <summary> contains errors detected when executing <see cref="M:Friflo.Engine.ECS.Utils.TreeUtils.AddDataEntitiesToEntity(Friflo.Engine.ECS.Entity,System.Collections.Generic.IReadOnlyList{Friflo.Engine.ECS.Serialize.DataEntity})"/> </summary>
        </member>
        <member name="M:Friflo.Engine.ECS.MapUtils.Set``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Is used if CollectionsMarshal.GetValueRefOrAddDefault() is not available - !NET6_0_OR_GREATER
            </summary>
        </member>
    </members>
</doc>
